
RTTI(runtime type information; 실행 시간 데이터형 정보)


1. 프렌드

- 클래스도 프렌드가 될 수 있다.

프렌드 클래스
- ex. Tv, Remote

```
// tv.h
#pragma once

class Tv
{
public:
	friend class Remote;		// Remote는 Tv의 private 부분에 접근할 수 있다.
	enum { Off, On };
	enum { MinVal, MaxVal = 20 };
	enum { Antenna, Cable };
	enum { TV, DVD };

	Tv(int s = Off, int mc = 125) : state(s), volume(5),
		maxchannel(mc), channel(2), mode(Cable), input(TV) {}
	void onoff() { state = (state == On) ? Off : On; }
	bool ison() const { return state == On; }
	bool volup();
	bool voldown();
	void chanup();
	void chandown();
	void set_mode() { mode = (mode == Antenna) ? Cable : Antenna; }
	void set_input() { input = (input == TV) ? DVD : TV; }
	void settings() const;
private:
	int state;	// On 또는 Off
	int volume;
	int maxchannel;
	int channel;
	int mode;
	int input;
};

class Remote
{
private:
	int mode;
public:
	Remote(int m = Tv::TV) : mode(m) {}
	bool volup(Tv& t) { return t.volup(); }
	bool voldown(Tv& t) { return t.voldown(); }
	void onoff(Tv& t) { t.onoff(); }
	void chanup(Tv& t) { t.chanup(); }
	void chandown(Tv& t) { t.chandown(); }
	void set_chan(Tv& t, int c) { t.channel = c; }
	void set_mode(Tv& t) { t.set_mode(); }
	void set_input(Tv& t) { t.set_input(); }
};
```

- 클래스 프렌드가 어떤 관계 표현에 매우 자연스러운 방법
- 프렌드 관계가 없다면, Tv 클래스의 private 부분들을 public으로 만들거나, 
	- Tv, 리모콘이 함께 들어간 더 큰 클래스 구성해야 함
	- 그러면 하나의 리모콘으로 여러 대의 tv 제어할 수 있다는 사실을 반영할 수 없음


프렌드 멤버 함수

- Remote에서 Tv의 private 멤버에 직접 접근하는 메서드는 Remote::set_chan() 뿐.
- 원하는 메서드들만 프렌드로 만드려면, 선언들과 정의들을 배치하는 순서에 신경 써야함

```
class Tv
{
	friend void Remote::set_chan(Tv& t, int c);
};
```
- 위 코드는 Remote 정의를 미리 알고 있어야 한다.


사전 선언 (forward declaration) 사용

```
class Tv;
class Remote { /*...*/ };
class Tv { /*...*/ };
```
- 또 문제는 Remote::onoff() 같은 인라인 코드.
- 이 시점에 컴파일러가 Tv 클래스 선언, Tv가 어떤 메서드를 가지는지 알아야 한다.
- Remote를 메서드 선언(declaration)으로 제한하고, 실제 정의(definition)들은 Tv 클래스 뒤에 두자

```
class Tv;					// 사전 선언
class Remote { /*...*/ };	// Tv를 사용하는 Remote 메서드들의 원형
class Tv { /*...*/ };		// 여기에 Remote 메서드들의 실제 정의들을 넣는다.
```

클래스 멤버 프렌드

```
// tv.h
#pragma once

class Tv;

class Remote
{
public:
	enum State{ Off, On };
	enum { MinVal, MaxVal = 20 };
	enum { Antenna, Cable };
	enum { TV, VCR };
private:
	int mode;
public:
	Remote(int m = TV) : mode(m) {}
	bool volup(Tv& t);		// 원형만
	bool voldown(Tv& t);
	void onoff(Tv& t);
	void chanup(Tv& t);
	void chandown(Tv& t);
	void set_mode(Tv& t);
	void set_input(Tv& t);
	void set_chan(Tv& t, int c);
};

class Tv
{
public:
	friend void Remote::set_chan(Tv& t, int c);
	enum State{ Off, On };
	enum { MinVal, MaxVal = 20 };
	enum { Antenna, Cable };
	enum { TV, DVD };

	Tv(int s = Off, int mc = 125) : state(s), volume(5),
		maxchannel(mc), channel(2), mode(Cable), input(TV) {}
	void onoff() { state = (state == On) ? Off : On; }
	bool ison() const { return state == On; }
	bool volup();
	bool voldown();
	void chanup();
	void chandown();
	void set_mode() { mode = (mode == Antenna) ? Cable : Antenna; }
	void set_input() { input = (input == TV) ? DVD : TV; }
	void settings() const;
private:
	int state;	// On 또는 Off
	int volume;
	int maxchannel;
	int channel;
	int mode;
	int input;
};


inline bool Remote::volup(Tv& t) { return t.volup(); }
inline bool Remote::voldown(Tv& t) { return t.voldown(); }
inline void Remote::onoff(Tv& t) { t.onoff(); }
inline void Remote::chanup(Tv& t) { t.chanup(); }
inline void Remote::chandown(Tv& t) { t.chandown(); }
inline void Remote::set_mode(Tv& t) { t.set_mode(); }
inline void Remote::set_input(Tv& t) { t.set_input(); }
inline void Remote::set_chan(Tv& t, int c) { t.channel = c; }

```

- 인라인 함수들은 내부 링크를 가진다.
- 함수 정의가 그 함수를 사용하는 파일 안에 들어 있어야 한다.


상호 프렌드 선언 가능
- 대화형 리모콘 등 서로에 영향을 끼치는 클래스 간.



2. 내포 클래스

내포 클래스(nested class)
- 새 타입에 클래스 사용 범위 제공해 이름 충돌 막음

```
class Queue
{
	struct Node 
	{ 
		Item item; 
		struct Node* next; 
	};
};
```

- 적절한 생성자 추가 및 유일하게 Node 객체가 생성되는 enqueue 메서드 수정

```
class Queue
{
	class Node 
	{ 
	public:
		Item item; 
		Node* next; 
		Node(const Item& i) : item(i), next(0) {}
	};
};

- 포인터를 0(널 포인터)로 설정


```
bool Queue::enqueue(const Item& item)
{
	if (isfull())
		return false;
	Node* add = new Node(item);
}
```

- 정의 파일에 생성자 정의 따로 뺀다면, :: 두 번 사용

```
Queue::Node::Node(const Item& i) : item(i), next(0) {}
```



내포 클래스와 접근

두 종류의 접근 형태
- 내포 클래스가 선언된 장소
- 접근 제한자


사용 범위
- 내포 클래스도 private, public 범위에 따름

- public일 때 외부 생성 예시
```
class Team
{
public:
	class Coach {};
};

Team::Coach forhire;
```


접근 제어
- 즉, 클래스가 선언된 장소가 클래스의 사용 범위 또는 가시 범위를 결정



템플릿에서의 내포

```
// queuetp.h
#pragma once

template <class Item>
class QueueTP
{
private:
	enum { Q_SIZE = 10 };
	// Node는 내포 클래스 정의이다.
	class Node
	{
	public:
		Item item;
		Node* next;
		Node(const Item& i) : item(i), next(0) {}
	};
	Node* front;
	Node* rear;
	int items;
	const int qsize;
	QueueTP(const QueueTP& q) : qsize(0) {}
	QueueTP& operator=(const QueueTP& q) { return *this; }
public:
	QueueTP(int qs = Q_SIZE);
	~QueueTP();
	bool isempty() const
	{
		return items == 0;
	}
	bool isfull() const
	{
		return items == qsize;
	}
	int queuecount() const
	{
		return items;
	}
	bool enqueue(const Item& item);
	bool dequeue(Item& item);
};

// QueueTP 메서드들
template <class Item>
QueueTP<Item>::QueueTP(int qs) : qsize(qs)
{
	front = rear = 0;
	items = 0;
}

template <class Item>
QueueTP<Item>::~QueueTP()
{
	Node* temp;
	while (front != 0)
	{
		temp = front;
		front = front->next;
		delete temp;
	}
}

template <class Item>
bool QueueTP<Item>::enqueue(const Item& item)
{
	if (isfull())
		return false;
	Node* add = new Node(item);
	// 실패하면, new 연산자는 std::bad_alloc 예외 발생
	items++;
	if (front == 0)
		front = add;
	else
		rear->next = add;
	rear = add;
	return true;
}

template <class Item>
bool QueueTP<Item>::dequeue(Item& item)
{
	if (front == 0)
		return false;
	item = front->item;
	items--;
	Node* temp = front;
	front = front->next;
	delete temp;
	if (items == 0)
		rear = 0;
	return true;
}
```




3. 예외

exception

abort()
- <cstdlib>
- abnormal program termination

```
if (a == -b) std::abort();
```


에러 코드 리턴

- ostream 클래스의 get(void) 멤버는 다음 번 입력되는 문자의 아스키 코드 리턴
- 그러나 파일 끝을 만났을 경우 EOF 리턴

errno
- C 수학 라이브러리가 사용하는 전역 변수



예외 메커니즘

- 에외 핸들러(exception handler)로 예외 포착
	- catch
- 특별한 예외들이 발생할 수 있는 하나의 코드 블록
	- try

```
// error3.cpp
#include <iostream>

int main()
{
	int x = 1, y = 0;
	try {
		if (y == 0) throw "잘못됨";
	}
	catch (const char* s)
	{
		std::cout << s << '\n';
		std::cout << "x: " << x << '\n' << "y: " << y << '\n';
	}
	return 0;
}
```



예외로 객체 사용하기

```
class bad
{
};
inline void bad::mesg()
{
	cout << "잘못";
}
int main()
{
	...
	if (a == -b)
	throw bad(a, b);	// 매개변수로 참조 객체가 올 수도 있음
}
```

try -> throw -> catch

noexcept()
- operand가 exception 발생할 수 있는지 보고하는 noexcept() 오퍼레이터도 있다.


스택 풀기

스택 풀기(unwinding the stack)

정상
- 호출한 함수 구문의 주소를 스택에 올려 놓는다.
- 호출된 함수의 실행이 끝나면, 프로그램은 스택에 올려 놓은 그 주소를 사용하여 프로그램 실행을 계속할 장소를 결정한다.
- 함수 호출은, 자동 변수로 취급되는 함수 매개변수들을 스택에 올려 놓는다.

- 호출된 함수가 새로운 자동 변수를 생성하면 그것도 스택에 추가된다.
- 호출된 함수가 또 다른 함수를 호출하면 그 정보도 스택에 추가된다.
- 어떤 함수가 종료되면, 프로그램 실행이 그 함수가 호출될 때까지 스택에 저장해 둔 주소로 넘어가고, 스택의 꼭대기가 해제된다.
- 각 함수는 자동 변수들을 해제한다.
- 자동 변수가 클래스 객체일 경우, 클래스 파괴자가 호출된다.

예외 종료
- 똑같이 프로그램은 스택에서 메모리를 해제한다.
- 그러나 스택에서 만나는 첫 번째 리턴 주소에서 멈추지 않고,
- try 블록에 들어 있는 리턴 주소에 도달할 때까지 계속해서 스택을 해제한다.
- 이때 제어는 try 블록 끝에 이어지는 예외 핸들러로 넘어간다.
- 이 과정을 스택 풀기라 부른다.
- 함수 리턴과 마찬가지로, 스택에 올라와 있는 모든 자동 클래스 객체들에 대해 클래스 파괴자 호출됨

- 프로그램이 예외가 잡히는 곳까지 도달하기 위해 스택을 풀 때, 
- 프로그램은 스택에 있는 자동 기억공간 변수들을 해제한다. (클래스 객체 => 파괴자)

또 하나의 차이
- 컴파일러는 언제나 예외가 발생할 때 임시 복사본을 만든다.

```
class problem {};
void super() throw(problem)
{
	if (oh_no)
	{
		problem oops();	// 객체 생성
		throw oops;		// 그 객체를 예외로 발생시킴
	}
}
try {
	super();
}
catch(problem& p)
{}
```
- oops의 복사본 참조. super가 종료된 후에 oops는 더 이상 존재하지 않으므로.


예외 클래스들의 상속 계층을 사용할 경우,
- 가장 늦게 파생된 클래스의 예외가 가장 먼저 포착되고, 기초 클래스 예외가 마지막에 포착되도록
	- catch 블록의 순서를 배치



exception 클래스

exception 헤더 파일

```
class bad_hmean : public std::exception
{
	public:
	string what() { return "hmean에 잘못된 매개변수"; }
};
```


stdexcept 헤더 파일
- logic_error와 runtime_error 클래스 정의
```
class bad_hmean : public logic_error
{};
```


에러 종류

logic_error 패밀리
- domain_error
	- 매개변수가 정의역 벗어날 때 
- invalid_argument
	- 기대하지 않는 값이 함수에 전달되었을 때
- length_error
	- 원하는 액션 할 만큼 충분한 공간이 없을 때
- out_of_bounds
	- 인덱싱 에러

runtime_error 패밀러
- 예측, 예방이 어려운, 실행하는 동안 나타날 수 있는 에러
- range_error
	- 계산 결과가 함수의 적절한 치역을 벗어날 수도 있을 때
- overflow_error
	- 데이터형이 나타낼 수 있는 최대 크기 초과
- underflow_error
	- 부동소수점형이 나타낼 수 있는 0이 아닌 최소 크기가 존재하는데,
	- 더 작은 값을 산출하는 계산이 언더플로 에러 발생

```
try {}
catch(out_of_bounds& oe) {}
catch(logic_error& oe) {}	// out_of_bounds 제외 나머지 로직 에러 패밀리 포착
catch(exception& oe) {}		// runtime_error, exception 객체들을 포착



bad_alloc 예외와 new

C++ new 메모리 대입 문제 2가지 방법 제공
1. new가 널 포린터를 리턴
2. new가 bad_alloc 예외를 발생

```
// newexcp.cpp
#include <iostream>
#include <new>
#include <cstdlib>
using namespace std;

struct Big
{
	double stuff[20000];
};

int main()
{
	Big* pb;
	try {
		cout << "큰 메모리 블록 대입을 요청하고 있습니다. \n";
		pb = new Big[1000000];
		cout << "메모리 블록 대입 요청이 거부되었습니다. \n";
	}
	catch (bad_alloc& ba)
	{
		cout << "예외 감지! \n";
		cout << ba.what() << endl;
		exit(EXIT_FAILURE);
	}
	cout << "메모리 블록이 성공적으로 대입되었습니다. \n";
	pb[0].stuff[0] = 4;
	cout << pb[0].stuff[0] << endl;
	delete[] pb;
	return 0;
}
```
```
큰 메모리 블록 대입을 요청하고 있습니다.
예외 감지!
bad allocation
```


NULL 포인터와 new

일부 컴파일러는 플래그나 스위치로 세팅한 new 제공
- new (std::nothrow) T;

```
// newexcp.cpp
#include <iostream>
#include <new>
#include <cstdlib>
using namespace std;

struct Big
{
	double stuff[20000];
};

int main()
{
	int* pi = new (std::nothrow) int;
	int* pa = new (std::nothrow) int[500];

	Big* pb;
	pb = new (std::nothrow) Big[1000000];
	if (pb == 0)
	{
		cout << "메모리 블록 대입 요청이 거부\n";
			exit(EXIT_FAILURE);
	}
}
```



예외, 클래스, 상속
- 하나의 예외 클래스를 다른 것으로부터 파생
- 클래스 정의 안에 클래스 선언을 내포시킴으로써 예외들을 클래스 안에 병합시킬 수 있다.
- 그렇게 내포된 선언들은 상속될 수 있다. (자신이 기초 클래스의 역할)


```
// sales.h
#include <stdexcept>
#include <string>

class Sales
{
public:
	enum { MONTHS = 12 };
	class bad_index : public std::logic_error
	{
	private:
		int bi;
	public:
		explicit bad_index(int ix,
			const std::string& s = "Sales 객체에서 인덱스 에러\n");
		int bi_val() const { return bi; }
		virtual ~bad_index() throw() {}
	};
	explicit Sales(int yy = 0);
	Sales(int yy, const double* gr, int n);
	virtual ~Sales() {}
	int Year() const { return year; }
	virtual double operator[](int i) const;
	virtual double& operator[](int i);
private:
	double gross[MONTHS];
	int year;
};

class LabeledSales : public Sales
{
public:
	class nbad_index : public Sales::bad_index
	{
	private:
		std::string lbl;
	public:
		nbad_index(const std::string& lb, int ix,
			const std::string& s = "LabeledSales 객체에서 인덱스 에러\n");
		const std::string& label_val() const { return lbl; }
		virtual ~nbad_index() throw() {}
	};
	explicit LabeledSales(const std::string& lb = "없음", int yy = 0);
	LabeledSales(const std::string& lb, int yy, const double* gr, int n);
	virtual ~LabeledSales() {}
	const std::string& Label() const { return label; }
	virtual double operator[](int i) const;
	virtual double& operator[](int i);
private:
	std::string label;
};
```

```
// sales.cpp
// #include "sales.h"
using std::string;

Sales::bad_index::bad_index(int ix, const string& s)
	: std::logic_error(s), bi(ix) {}

Sales::Sales(int yy)
{
	year = yy;
	for (int i = 0; i < MONTHS; i++)
		gross[i] = 0;
}

Sales::Sales(int yy, const double* gr, int n)
{
	year = yy;
	// 생략
}

double Sales::operator[](int i) const
{
	if (i < 0 || i >= MONTHS)
		throw bad_index(i);
	return gross[i];
}

// 이하 생략
```

```
	// main.cpp
	try {}
	catch (LabeledSales::nbad_index& bad) {}
	catch (Sales::bad_index& bad) {}
```



잘못된 예외

```
	terminate_handler set_terminate(terminate_handler f) noexcept;
```

- terminate_handler는 exception 헤더 파일에 선언되어 있음

```
	double argh(double, double) throw(out_of_bounds);

	try {
		x = argh(a, b);
	}
	catch (out_of_bounds& ex)
	{}
```


```
	unexpected_handler set_unexpected(unexpected_handler f) noexcept;
```

- set_terminate 함수보다 더 세밀하게 제공하는 set_unexpected
- terminate() (디폴트), abort(), exit()를 호출하여 프로그램을 종료시킬 수 있음
- 예외를 발생시킬 수 있음

```
	double argh(double, double) throw(out_of_bounds, bad_exception);
	try {
		x = argh(a, b);
	}
	catch(out_of_bounds& ex) {}
	catch(bad_exception& ex) {}
```



예외 주의사항
- 프로그램 크기가 커지고, 실행 속도가 떨어짐
- 템플릿과 어울리지 않음
	- 템플릿 특수화에 따라 다른 종류 예외 발생하기 때문.




4. RTTI

runtime type identification
- 실행 시간 데이터형 정보


RTTI의 목적
- 기초 클래스 포인터에 대입하기 위해 포인터가 지시하는 객체의 종류 파악
- 가상 함수의 경우 굳이 그 객체형을 알 필요 없으나, 
- 파생 객체가 상속되지 않은 메서드를 가지고 있을 때,
- 일부 객체들만이 그 메서드를 사용하기 위해, 혹은
- 디버깅 목적으로 어떤 종류의 객체들이 생성되는지 추적하고 싶다.



RTTI의 동작 방식

dynamic_cast 연산자
- 어떤 객체를 기초 클래스 포인터가 지시하도록 설정할 수 있음
- 기초 클래스형을 지시하는 포인터로부터 파생 클래스형을 지시하는 포인터를 생성한다.
- 가능하지 않다면, 널 포인터인 0을 리턴한다.

typeid 연산자
- 어떤 객체의 정확한 데이터형을 식별하는 하나의 값을 리턴한다.

type_info 구조체
- 어떤 특별한 데이터형에 대한 정보를 저장한다.


RTTI는 가상 함수들을 가지고 있는 클래스에 대해서만 사용할 수 있다.



dynamic_cast 연산자
- 가장 많이 사용되는 RTTI 요소
- 객체의 주소를 특정형의 포인터에 안전하게 대입할 수 있는지 알려줌

```


- 데이터형 변환이 안전한지 물어보는 것이, 어떤 종류의 객체를 지시하는지 물어보는 것보다 더 유용

```
	class Grand {};
	class Superb : public Grand {};
	class Magnificent : public Superb {};

	Grand* pg = new Grand;
	Grand* ps = new Superb;
	Grand* pm = new Magnificent;

	Magnificent* p1 = (Magnificent*)pm;		// 안전
	Magnificent* p2 = (Magnificent*)pg;		// 기초 객체의 주소를 파생 포인터에 대입하므로 안전하지 않음
	Superb* p3 = (Magnificent*)pm;			// 파생 객체의 주소를 기초 포인터에 대입하므로 안전
```

```
	Superb* pm = dynamic_cast<Superb*>(pg);		// (안전하게 변환될 수 있음?) 객체의 주소 리턴 : 널 포인터인 0 리턴;
```

```
	if (ps = dynamic_cast<Superb*>(pg))		// 'ps = ' 으로 널포인터 체크
		ps->say();
```


부적절한 요청이 제시될 때, dynamic_cast는 bad_cast형의 예외 발생

```
	#include <typeinfo>

	try {
		Superb& rs = dynamic_cast<Superb&>(rg);
	}
	catch (bad_cast&)
	{ }
```


typeid 연산자와 type_info 클래스
- typeid 연산자를 사용해 두 객체의 데이터형이 같은지 결정
- 클래스 이름, 객체로 평가되는 식
- type_info 객체에 대한 참조를 리턴
- type_info는 typeinfo 헤더 파일에 정의된 클래스

```
	typeid(Magnificent) == typeid(*pg);
```
- pg가 널포인터면 bad_typeid 예외 발생

```
typeid(*pg).name;
```
- 포인터가 지시하는 객체의 클래스 이름 출력

```
// RTTI - dynamic_cast, typeid, type_info 사용
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <typeinfo>
using namespace std;

class Grand
{
private:
	int hold;
public:
	Grand(int h = 0) : hold(h) {}
	virtual void Speak() const { cout << "나는 Grand 클래스다!\n"; }
	virtual int Value() const { return hold; }
};

class Superb : public Grand
{
public:
	Superb(int h = 0) : Grand(h) {}
	void Speak() const override { cout << "나는 Superb 클래스다!!\n"; }
	virtual void Say() const
	{
		cout << "내가 가지고 있는 Superb 값은 " << Value() << "이다.\n";
	}
};

class Magnificent : public Superb
{
private:
	char ch;
public:
	Magnificent(int h = 0, char cv = 'A') : Superb(h), ch(cv) {}
	void Speak() const override { cout << "나는 Magnificent 클래스다!!!\n"; }
	void Say() const override
	{
		cout << "내가 가지고 있는 문자는 " << ch << "이고, 정수는 " << Value() << "이다.\n";
	}
};

Grand* GetOne()
{
	Grand* p;
	switch (rand() % 3)
	{
	case 0:
		p = new Grand(rand() % 100);
		break;
	case 1:
		p = new Superb(rand() % 100);
		break;
	case 2:
		p = new Magnificent(rand() % 100, 'A' + rand() % 26);
		break;
	default:
		p = nullptr;
		break;
	}
	return p;
}

int main()
{
	srand(time(0));
	Grand* pg;
	Superb* ps;
	for (int i = 0; i < 5; i++)
	{
		pg = GetOne();
		cout << "지금 " << typeid(*pg).name() << "형을 처리하고 있습니다.\n";
		pg->Speak();
		if (ps = dynamic_cast<Superb*>(pg))
			ps->Say();
		if (typeid(Magnificent) == typeid(*pg))
			cout << "그래, 너야말로 진짜 Magnificent 클래스다.\n";
	}
	return 0;
}
```


RTTI의 오용
- if else 구문들의 확장된 연쇄에서 typeid를 사용할 경우,
- dynamic_cast와 가상 함수들을 대신 사용할 수 있는지 확인

```
	if (ps = dynamic_cast<Superb*>(pg))
		ps->Say();
```
- 위와 같이 typeid 대신 dynamic_cast 사용하는 것이 가독성 좋음




5. 데이터형 변환 연산자

dynamic_cast
const_cast
static_cast
reinterpret_cast



dynamic_cast

```
	High* ph = new High;
	Low* pl = new Low;

	pl = dynamic_cast<Low*> ph;
```

- 업캐스트 허용, 다른 타입캐스팅 노허용



const_cast
- 어떤 값을 const나 volatile로, 혹은 그 반대로 변경

```
	High bar;
	const High* pbar = &bar;

	High* pb = const_cast<High*>(pbar);				// 맞다
	const Low* pl = const_cast<const Low*>(pbar);	// 틀리다
```

- C 스타일 일반적인 데이터형 변환은 const성도 변경하고, 데이터형도 바꿀 수 있으므로 위험


```
// constcast.cpp
#include <iostream>
using std::cout;
using std::endl;

void change(const int* pt, int n)
{
	int* pc;
	pc = const_cast<int*>(pt);
	*pc += n;
}

int main()
{
	int pop1 = 1;
	const int pop2 = 2;
	cout << "pop1, pop2: " << pop1 << ", " << pop2 << endl;
	change(&pop1, -100);
	change(&pop2, -100);	// 원래 값이 const가 아니어야 const_cast 타입캐스팅이 가능하다.
	cout << "pop1, pop2: " << pop1 << ", " << pop2 << endl;
	return 0;
}
```
```
	pop1, pop2: 1, 2
	pop1, pop2: -99, 2
```



static_cast
- 암시적으로 변환할 수 있을 때만 유효
- ex. High가 Low가 상속관계면 서로 변환은 유효. 관계없는 클래스 간 변환은 비허용

```
High bar;
Low blow;

High* pb = static_cast<High*>(&blow);	// 유효한 업캐스트
Low* pl = static_cast<Low*>(&bar);		// 유효한 다운캐스트
Pond* pmer = static_cast<Pond*>(&blow);	// 유효하지 않다.
```

- 다운캐스트 명시적인 데이터형 변환 없이 암시적인 데이터형 변환으로 이루어질 수 있으므로 유효



reinterpret_cast
- 위험한 데이터형 변환하기 위한 것

```
#include <iostream>
using std::cout;

int main()
{
	struct dat { short a; short b; };
	long value = 0xA224B118;
	dat* pd = reinterpret_cast<dat*>(&value);
	cout << pd->a;	// 그 값의 처음 2바이트 출력
	return 0;
}
```
-20200
```

모든 것을 허용하진 않는다.
- 포인터형을, 포인터 표기를 충분히 저장할 수 있는 큰 정수형으로 캐스트할 수 있지만,
	- 포인터형을 보다 작은 정수형으로 또는 부동소수점형으로는 캐스트할 수 없다.
- 함수 포인터를 데이터 포인터로, or 데이터 포인터를 함수 포인터로 캐스트할 수 없다.

C++에서는 다음 타입 캐스팅 안됨
```
	char ch = char (&d);		// char형의 크기가 너무 작아 포인터 구현을 담을 수 없다.
```




요약
1. 사전선언
2. 내포된 클래스
3. 예외 try catch
4. RTTI
5. dynamic_cast: 파생 클래스 포인터를 기초 클래스 포인터로 변환하는 데 사용
	- 가상 함수 호출에 문제가 없도록 보장




연습문제
1. 
	a. friend class clasp;
	b. class muff; 전방선언 필요
	c. 컴파일러가 cuff::snip() 항을 인식할 수 있도록 cuff 클래스 선언이 muff 클래스 선언보다 앞에 와야 한다.
		컴파일러가 snip(muff&)를 인식할 수 있도록 muff에 대한 전방선언이 필요하다.

2. 만들 수 없다.
- 클래스 A가 클래스 B의 멤버 함수를 프렌드로 가지려면,
- B 선언이 A 선언보다 앞에 와야 한다. 즉, 전방선언으로 충분하지 않다.
- 전방선언이 A에게 B가 클래스라는 사실을 알려주지만, B의 멤버 이름들은 알려 주지 않는다.
- 같은 논리로, B가 A의 멤버 함수를 프렌드로 가지려면, A선언이 B선언보다 앞에 와야 한다.
- 이 두 요구는 배타적이어서 양립될 수 없다.


3. 클래스에 대한 접근은 public 인터페이스를 통해서만 이루어진다.
	유일한 일이 생성자를 호출하여 그 객체를 생성하는 일


4. 
throw 구문은 그 함수에 대한 호출을 포함하는 try 구문을 발견할 때까지, 함수 호출들의 연쇄를 거슬러 올라간다.
try 블록을 발견하면, 프로그램 실행은 그 다음의 일치하는 catch 블록으로 넘어간다.


5. 가장 늦은 파생 클래스로부터 가장 이른 파생 클래스 순서로 catch 블록들을 배치해야 한다.

6. 
- dynamic_cast 방식: Superb 이하 파생된 객체에 대해 true
- typeid 방식: Superb 객체에 대해서만 true

7. static_cast는 암시적인 타입캐스팅이 모두 허용된다. 업캐스팅은 물론, 다운캐스팅도 허용된다. + 정수형<->열거형 변환 허용 + 수치형들 간 변환 허용
dynamic_cast는 업캐스팅만을 허용한다. 다운캐스팅 혹은 다른 캐스팅 시도 시 nullptr(0)을 반환한다.



연습문제
1. a. snap 안 friend clasp; 시점에선 clasp가 알려져있지 않음 + friend class 로 지정해야 함
	b. cuff 안 void snip(muff&) {}; 시점에선 muff 클래스가 알려져있지 않음
	c. muff 안 cuff 알려져있지 않음
2. 만들 수 없다!!
	A가 B의 멤버 함수를 프렌드로 가지려면, B 선언이 A 선언보다 앞에 와야 한다.
	B가 A의 ~~
	두 요구는 배타적이라 양립될 수 없다.
3. 객체를 생성하는 것 밖에 없어서?
	유일한 일이 생성자를 호출하여 그 객체를 생성하는 일
4. throw는 try 블록이 있는 함수까지 스택을 언와인딩한다.
	return은 현재 함수는 스택에서 반환하고 직전 호출한 함수로 되돌아간다.
5. 가장 늦은 파생 클래스로부터 가장 이른 파생 클래스 순서로 catch 블록들을 배치한다.
6. 1번은 객체가 Superb 혹은 Superb에서 파생된 객체를 지시하는 경우에만 true,
	2번은 Superb 객체에 대해서만 true
7. static_cast : 업캐스트, 다운캐스트 모두 허용
	dynamic_cast : 업캐스트만 허용

	dynamic_cast 추가설명
	문제는 부모 타입의 포인터를 자식 타입의 포인터로 다운 캐스팅할 때인데 이때는 무조건 변환을 허용하지 않고 안전하다고 판단될 때만 허용한다. 
	안전한 경우란 변환 대상 포인터가 부모 클래스형 포인터 타입이되 실제로 자식 객체를 가리키고 있을 때 자식 클래스형 포인터로 다운 캐스팅할 때이다. 
	말이 좀 복잡한데 실제로 가리키고 있는 객체의 타입대로 캐스팅했으므로 이 포인터로 임의의 멤버를 참조해도 항상 안전하다.