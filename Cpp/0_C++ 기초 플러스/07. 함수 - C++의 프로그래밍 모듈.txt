
배열은 리턴값으로 사용할 수 없다.
- 함수가 배열을 직접 리턴할 수는 없지만, 구조체나 객체의 일부로 되어 있는 배열은 리턴할 수 있다.

함수 원리
- 자신의 리턴값을 CPU의 지정된 레지스터나 메모리에 복사하는 방법으로 리턴
- 함수를 호출한 프로그램이 그 위치에 무엇이 있는지 조사한다.
    - 그러므로 리턴하는 함수와 호출하는 함수는 그 위치에 놓을 값의 데이터형을 서로 일치시켜야 한다.
- 함수 원형은 호출한 프로그램에게 그 위치에 어떤 데이터형이 놓일지 알려준다.

함수 원형
- 컴파일러에게 함수의 인터페이스를 알려준다.
- 즉, 리턴값이 있으면 그 리턴값의 데이터형을 컴파일러에게 알려준다.

C++와 ANSI C의 함수 원형 비교
- void a();
    - C++: void. 함수가 어떠한 매개변수도 요구하지 않는다.
    - ANSI C: 매개변수 리스트가 무엇인지 확인하지 않겠다.
        - C++에서 이 의미는 void a(...); 와 같이 생략 부호(ellipsis) 사용
        
함수 원형의 보장
- 컴파일러가 함수의 리턴값을 바르게 처리한다.
- 사용자가 정확한 개수의 매개변수를 사용했는지 컴파일러가 검사한다.
- 사용자가 정확한 데이터형의 매개변수를 사용했는지 컴파일러가 검사한다.
    - 사용자가 정확한 데이터형을 사용하지 않았다면, 컴파일러가 정확한 데이터형으로 변환한다.

매개변수의 개수는 맞지만 데이터형이 불일치하는 경우
- 함수 원형에 정의되어 있는 데이터형으로 자동 변환

//
직접 실험 결과
- 리턴 타입이나 매개변수 타입이 선언부와 정의부가 맞지 않으면, 링크 에러 뜸
//


형식 매개변수 (formal parameter)
- 전달되는 값을 넘겨받는 데 쓰이는 변수

실제 매개변수 (actual argument)
- 함수에 전달되는 값

=> 함수에 매개변수를 전달하는 것은 argument를 parameter에 대입하는 것


lotto 예제

```
	#include <iostream>
	using namespace std;

	long double probability(unsigned numbers, unsigned picks);

	int main()
	{
		double total, choices;
		cout << "전체 수의 개수, 뽑을 수의 개수 입력: ";
		while ((cin >> total >> choices) && choices <= total)
		{
			cout << "당신이 이길 확률은 ";
			cout << probability(total, choices);	// 승률을 계산한다.
			cout << " 번 중에서 한 번입니다. \n";
			cout << "다시 두 수를 입력하십시오. (끝내려면 q를 입력): ";
		}
		cout << "프로그램 종료.\n";
		return 0;
	}

	long double probability(unsigned numbers, unsigned picks)
	{
		long double result = 1.0;
		long double n;
		unsigned p;

		for (n = numbers, p = picks; p > 0; n--, p--)
			result = result * n / p;
		return result;
	}
```



03. 함수와 배열

```
int sum_arr(int arr[], int n);
```

// 되새기기
- arr은 배열이 아닌 포인터
- 배열 이름은 첫 번째 원소의 주소
- &arr은 전체 배열 주소

- arr[i] == *(arr + i)
- &arr[i] == arr + i


함수 매개변수로 쓰인 배열(사실 포인터) 예제

```
	#include <iostream>
	using namespace std;

	int sumArr(int arr[], int n);

	int main()
	{
		const int arSize = 8;
		int cookies[arSize] = { 1,2,4,8,16,32,64,128 };
		cout << cookies << " = 배열주소, ";
		cout << "sizeof cookies = " << sizeof cookies << endl;

		int sum = sumArr(cookies, arSize);
		cout << "먹은 과자 수 합계: " << sum << endl;
		sum = sumArr(cookies, 3);
		cout << "처음 세 사람은 과자 " << sum << "개를 먹었습니다.\n";
		sum = sumArr(cookies + 4, 4);
		cout << "마지막 네 사람은 과자 " << sum << "개를 먹었습니다.\n";
		
		return 0;
	}

	int sumArr(int arr[], int n)
	{
		int total = 0;
		cout << arr << " = arr, ";
		cout << "sizeof arr = " << sizeof arr << endl;
		for (int i = 0; i < n; i++)
			total += arr[i];
		return total;
	}
```
```
0000009028EFFC18 = 배열주소, sizeof cookies = 32
0000009028EFFC18 = arr, sizeof arr = 8
먹은 과자 수 합계: 255
0000009028EFFC18 = arr, sizeof arr = 8
처음 세 사람은 과자 7개를 먹었습니다.
0000009028EFFC28 = arr, sizeof arr = 8
마지막 네 사람은 과자 240개를 먹었습니다.
```

cookies 사이즈는 32, arr 사이즈는 8
- 배열 전체의 크기, 포인터 변수의 크기


const
- const double ar[] == const double * ar
- 원본 배열의 값을 변경할 목적이 없을 때 const T


const + 배열 범위 사용 예제

```
	#include <iostream>
	using namespace std;

	int sumArr(const int* begin, const int* end);

	int main()
	{
		const int arSize = 8;
		int cookies[arSize] = { 1,2,4,8,16,32,64,128 };
		cout << cookies << " = 배열주소, ";
		cout << "sizeof cookies = " << sizeof cookies << endl;

		int sum = sumArr(cookies, cookies + arSize);
		cout << "먹은 과자 수 합계: " << sum << endl;
		sum = sumArr(cookies, cookies + 3);
		cout << "처음 세 사람은 과자 " << sum << "개를 먹었습니다.\n";
		sum = sumArr(cookies + 4, cookies + 8);
		cout << "마지막 네 사람은 과자 " << sum << "개를 먹었습니다.\n";
		
		return 0;
	}

	int sumArr(const int * begin, const int * end)
	{
		const int* pt;
		int total = 0;

		for (pt = begin; pt != end; pt++)
			total += *pt;
		return total;
	}
```
```
000000EAA377F5B8 = 배열주소, sizeof cookies = 32
먹은 과자 수 합계: 255
처음 세 사람은 과자 7개를 먹었습니다.
마지막 네 사람은 과자 240개를 먹었습니다.
```


const 포인터

const int* pt;
int* const pt;

const 변수의 주소를 const가 아닌 일반 포인터에 대입을 금지
- 꼭 하고 싶으면 const_cast 타입캐스팅

// 이건 블로그에도 따로 정리했음



4. 함수와 2차원 배열

```
	int data[2][3] = {{1,2,3},{4,5,6}};
	int total = sum(data, 2);
```
원형
```
	int sum(int (*ar2)[4], int size);
	int sum(int ar2[][4], int size);
```

int *ar2[4]
- 배열을 지시하는 포인터를 선언한 것이 아니라, int 값을 지시하는 포인터를 4개 가진 배열을 선언한 것

ar2[r][c] == *(*(ar2 + r) + c);



문자열 끝이 null 문자임을 이용해 검사하는 예제

```
	#include <iostream>
	using namespace std;

	unsigned c_in_str(const char * str, char ch);

	int main()
	{
		char m[15] = "minimum";
		const char* u = "ululate";

		cout << c_in_str(m, 'm') << '\n';
		cout << c_in_str(u, 'u') << '\n';
		
		return 0;
	}

	unsigned c_in_str(const char* str, char ch)
	{
		int count = 0;
		while (*str)    // 이거다!
		{
			if (*str == ch) count++;
			str++;
		}
		return count;
	}
```
```
3
2
```



원점에서 거리와 각도를 구하는 프로그램 예제

```
	#include <iostream>
	#include <cmath>
	using namespace std;

	struct polar
	{
		double distance, angle;
	};
	struct rectD
	{
		double x, y;
	};

	polar rectToPolar(const rectD* pxy, polar* pda);
	void showPolar(const polar* pda);

	int main()
	{
		rectD rplace;
		polar pplace;

		cout << "x값과 y값을 입력: ";
		while (cin >> rplace.x >> rplace.y)
		{
			pplace = rectToPolar(&rplace, &pplace);
			showPolar(&pplace);
			cout << "x값과 y값을 입력하십시오 (끝내려면 q 입력): ";
		}
		cout << "프로그램 종료.\n";
		return 0;
	}

	// 직각 좌표를 극 좌표로 변환
	polar rectToPolar(const rectD* pxy, polar* pda)
	{
		polar answer;
		answer.distance = sqrt(pxy->x * pxy->x + pxy->y * pxy->y);
		answer.angle = atan2(pxy->y, pxy->x);
		return answer;
	}

	// 라디안 단위를 도 단위로 변환하여 극 좌표를 출력한다.
	void showPolar(const polar* pda)
	{
		const double radToDeg = 57.2977951;
		
		cout << "거리 = " << pda->distance;
		cout << ", 각도 = " << pda->angle * radToDeg;
		cout << "도\n";
	}
```



std::string, std::array 예제들 생략

8장에서 참조 사용할 것



9. 재귀

```
	#include <iostream>
	using namespace std;

	const int len = 66;
	const int divs = 6;

	void subdivide(char ar[], int low, int high, int level);

	int main()
	{
		char ruler[len];
		for (int i = 1; i < len - 2; i++)
			ruler[i] = ' ';
		ruler[len - 1] = '\0';
		int max = len - 2;
		int min = 0;
		ruler[min] = ruler[max] = '|';
		cout << ruler << endl;

		for (int i = 1; i <= divs; i++)
		{
			subdivide(ruler, min, max, i);
			cout << ruler << endl;
			for (int j = 1; j < len - 2; j++)
				ruler[j] = ' ';
		}
		return 0;
	}

	void subdivide(char ar[], int low, int high, int level)
	{
		if (level == 0) return;
		int mid = (high + low) / 2;
		ar[mid] = '|';
		subdivide(ar, low, mid, level - 1);
		subdivide(ar, mid, high, level - 1);
	}
```

재귀 호출의 단계가 적을 경우 우아하고 간단한 재귀!



10. 함수를 지시하는 포인터

함수주소명()
```
process(think); 	// process()에 think()의 주소를 전달한다.
```

포인터 선언이 함수의 리턴형과 함수의 시그내처(매개변수 리스트)를 알려주어야 한다.
- 즉, 함수 원형이 그 함수에 대해 제공하는 것과 동일한 정보를 선언이 제공해야 한다.
```
	double pam(int);	// 함수 원형
	double(*pf)(int);	// pf 는 하나의 int를 매개변수로 취하고
						// double형을 리턴하는 함수를 지시한다.
	pf = pam;			// pf는 이제 pam() 함수를 지시한다.
```
```
	double (*pf)(int);	// pf는 double을 리턴하는 함수를 지시하는 포인터
	double *pf(int);	// pf()는 double형을 지시하는 포인터를 리턴하는 함수
```

리턴형, 시그내처가 일치해야 함.

호출 시 pf, (*pf) 동등하게 사용되나, 후자로 사용해 의미를 직관화

예제

```
	#include <iostream>
	using namespace std;

	double gildong(int);
	double moonsoo(int);
	void estimate(int lines, double (*pf)(int));

	int main()
	{
		int code;
		cout << "필요한 코드의 행 수: ";
		cin >> code;
		cout << "홍길동의 시간 예상: \n";
		estimate(code, gildong);
		cout << "박문수의 시간 예상: \n";
		estimate(code, moonsoo);

		return 0;
	}

	double gildong(int lns) { return 0.05 * lns; }
	double moonsoo(int lns) { return 0.03 * lns + 0.0004 * lns * lns; }

	void estimate(int lines, double (*pf)(int))
	{
		cout << lines << "행을 작성하는 데 ";
		cout << (*pf)(lines) << "시간이 걸립니다. \n";
	}
```

```
	#include <iostream>
	using namespace std;

	double A(double a)
	{
		return a;
	}
	double B(double b, double (*pf)(double))
	{
		return b + 1.5;
	}
	int main()
	{
		cout << B(2.7, A);
	}
```

난해함
```
	const double* (*p1)(const double*, int);
	const double* (*p1)(const double*, int) = f1;
	cout << *(*p1)(av, 4);
	const double* (*(*pd)[3])(const double*, int) = &pa;
```

예제
```
	#include <iostream>
	using namespace std;
	// 동일한 세 함수
	const double* f1(const double ar[], int n);
	const double* f2(const double [], int);
	const double* f3(const double*, int);

	int main()
	{
		double av[3] = { 1.0, 2.0, 3.0 };

		const double* (*p1)(const double*, int) = f1;
		auto p2 = f2;
		cout << "함수 포인터:\n";
		cout << "주소 값\n";
		cout << (*p1)(av, 3) << ": " << *(*p1)(av, 3) << endl;
		cout << p2(av, 3) << ": " << *p2(av, 3) << endl;

		const double* (*pa[3])(const double*, int) = { f1,f2,f3 };
		auto pb = pa;
		cout << "\n함수 포인터를 원소로 가지는 배열: \n";
		cout << "주소 값 \n";
		for (int i = 0; i < 3; i++)
			cout << pa[i](av, 3) << ": " << *pa[i](av, 3) << endl;

		cout << "\n함수 포인터를 가리키는 포인터: \n";
		cout << "주소 값 \n";
		for (int i = 0; i < 3; i++)
			cout << pb[i](av, 3) << ": " << *pb[i](av, 3) << endl;

		cout << "\n포인터를 원소로 가지는 배열을 가리키는 포인터: \n";
		cout << "주소 값 \n";
		auto pc = &pa;
		cout << (*pc)[0](av, 3) << ": " << *(*pc)[0](av, 3) << endl;
		const double* (*(*pd)[3])(const double*, int) = &pa;
		const double* pdb = (*pd)[1](av, 3);
		cout << pdb << ": " << *pdb << endl;
		cout << (*(*pd)[2])(av, 3) << ": " << *(*(*pd)[2])(av, 3) << endl;

		return 0;
	}

	const double* f1(const double* ar, int n) { return ar; }
	const double* f2(const double ar[], int) { return ar + 1; }
	const double* f3(const double ar[], int) { return ar + 2; }
```

typedef 키워드 사용




연습문제
1. 함수 선언(원형 제공), 정의, 호출
2~5. [생략]
6. 값이 복사되어 전달되므로 원본 데이터는 항상 보호된다.

7. 문자배열, 문자열 상수, 문자열 (첫 번째 문자 지시하는) 포인터

8. [생략]
9. 문자열 상수 첫 번째 요소 p, 
	문자열 상수의 두 번째 요소인 c
	=> 문자열 상수는 배열 이름과 같은 역할!

10. 값 전달 시 이름 그대로,
주소 전달 시 & 붙여서.
시간과 메모리 절약

값으로 전달 시 직접멤버 표기, 주소 전달 시 간접 멤버 연산자 사용


11~12. [생략]
13.
```
typedef void (*p_f1)(applicant*);
p_f1 p1 = f1;
typedef const char* (*p_f2)(const applicant*, cons applicant*);
p_f2 p2 = f2;

p_f1 ap[5];
p_f2(*pa)[10];
```



문제
1. 선언, 정의, 호출
2. string plot(map* mp);
3. 
4. 
5. 
6. 복사되어 전달되므로 원본값이 변하지 않기 떄문에.
7. ?? char 배열, 문자열 상수, 첫 번쨰 문자를 지시하는 포인터
8. 
9. p, c
10. 
	구조체를 값으로 전달하기 위해 구조체 변수를 매개변수로 하고, 멤버 접근 연산자를 통해 접근한다.
	구조체를 값으로 전달하면 캐시 히트율이 높다.
	구조체의 주소를 전달하면 적은 양의 메모리를 전달하여 더 효율적이다.
11. 
12. 
13. 
	const char* p1(const applicant* a1, const applicant* a2) = ap;

