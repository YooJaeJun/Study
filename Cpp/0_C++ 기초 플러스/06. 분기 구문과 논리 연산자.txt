
조건 표현식의 연산자와 버그 예방법

```
if (3 == myNumber) {}


```


2. 논리 표현식

논리 연산자 || && ...
- 시퀀스 포인터로 작동. 좌변에 지시된 값의 변경은 우변이 평가되기 전에 일어난다.

```
int i = 10;
i++ < 6 || i == j
```

- j와의 비교가 이루어질 때 쯤이면, i의 값은 이미 11로 변해있다.
- 위에선 하나의 표현식이 true이면 전체 논리 표현식이 true가 되므로, 
- C++은 좌변의 표현식이 true일 경우에 우변의 표현식은 평가하지도 않는다. 
- (세미콜론과 콤마 연산자도 시퀀스 포인터이다.)


연산자 우선순위
- 논리곱&& > 논리합||

```
age > 30 && age < 45 || weight > 300
// (age > 30 && age < 45) || weight > 300  과 같다.
```


iso646.h
- and, or, not 매그로로 대체



3. 문자 함수를 위한 cctype 라이브러리

cctype
- 어떤 문자가 대문자인지, 숫자인지, 구두점 문자인지 등을 판별하는 작업들을 간단하게 처리하는 함수 모음 헤더
- int 형 반환됨. 필요 시 bool형으로 변환해서 사용하기
- ex) 
	isalpha(ch) - 알파벳 문자?
	ispunct - 구두점( , . ) 문자?
	isdigit - 십진수 숫자인지
	isspace - 화이트스페이스(개행, 빈칸, 탭 문자, 캐리지 리턴)?
	
	isalnum - 알파벳 or 숫자?
	isblank - 빈칸 or 수평 탭 문자?
	iscntrl - 제어문자?
	isgraph - 빈칸이 아닌 인쇄할 수 있는 문자?
	islower - 소문자?
	isprint - 빈칸을 포함해 인쇄할 수 있는 문자?
	isupper - 대문자?
	idxdigit - 16진수?
	
	tolower - 대문자를 소문자로
	toupper - 소문자를 대문자로.



switch
- 단점: switch는 int형만 처리.
- 장점: switch가 코드 크기나 실행 속도 면에서 if else 보다 훨씬 효율적





07. 수를 읽어들이는 루프

cin 불량 입력 초기화
- cin.clea(), cin.get() 활용

```
#include <iostream>
using namespace std;

int main()
{
	int n;
	cin >> n;
	cout << n << '\n';
	cin.clear();
	while (cin.get() != '\n') continue;
	cin >> n;
	cout << n;
	return 0;
}
```



08. 간단한 파일 입력/출력

cin을 이용한 입력 시
- 프로그램은 연속된 바이트들로 인식
- cin 객체가 텍스트를 다른 데이터형으로 변환하는 책임을 맡음

ex. 38.5 19.2 을 cin 입력
```
char ch;
```
- 3에 해당하는 문자 코드가 바이너리로 ch에 대입
- 입력과 목적지가 둘 다 문자라 따로 변환이 필요없다.
- 그 다음 8, ...
```
int n
```
- cin은 숫자 3과 8을 읽고, 소수점을 입력 큐에 남겨둠
- 두 문자가 수치 값 38에 해당한다고 계산함
- 38에 해당하는 바이너리 코드를 n에 대입
```
double x;
```
- 부동소수점 수의 일부가 아닌 첫 문자가 나올 때까지 읽는다.
- 즉, 숫자 3, 8, 소수점(.) 문자, 숫자 5를 읽고,
- 다음 읽을 문자로 빈칸을 입력 큐에 남겨둠
- cin은 이 네 문자가 수치 값 38.5에 해당한다고 계산
- 38.5에 해당하는 바이너리 코드(부동소수점 형식)을 x에 복사
```
char word[50];
```
- 빈칸 문자가 나올 때까지 읽음
- double과 동일하게 읽고 동일하게 큐에 남김
- 이 네 문자에 해당하는 문자 코드들을 배열에 저장하고,
- 끝에 널 문자를 추가
- 변환 없음


```
char word[50];
cin.getline(word, 50);
```
- 개행 문자가 나올 때까지 읽음
- 마지막 숫자 2까지의 모든 문자들을 배열에 저장
- 끝에 널 문자를 추가하고, 개행 문자는 폐기함!
- 다음 행의 첫 문자가 입력 큐에서 다음에 읽은 문자가 된다.
- 변환 필요 없음


출력에서는 정반대의 변환
- 정수들이 숫자 문자들의 시퀀스로 변환됨
- 부동소수점 수들이 숫자 문자와 기타 문자들의 시퀀스로  변환됨
- 문자 데이터는 변환이 필요 없음


=> 모든 입력이 텍스트로 시작

데이터베이스와 스프레드시트는 수치 데이터를 수치 형식(바이너리 정수 or 바이너리 부동소수점 형식)으로 저장
워드프로세싱 파일은 텍스트 정보를 포함하되, 포맷팅, 글꼴, 프린터 등을 지정하기 위해 텍스트가 아닌 데이터를 포함


파일 출력 방식 (cout 사용법과 유사)
- fstream 헤더 파일 포함
- fstream 헤더 파일은 출력을 처리하는 ofstream 클래스를 정의
- 하나 이상의 ofstream 변수 또는 객체를 선언할 필요 있음. 
	- 일반적인 이름짓기 관례를 준수하는 한, 사용자는 원하는 이름을 지정
- std 이름 공간 지정
	- using 지시자 or std:: 접두사
- 특정 ofstream 객체와 특정 파일을 연결시킬 필요 있음
	- open() 메서드 사용
- 파일을 다루는 작업이 끝나면, close() 메서드를 사용해 그 파일을 닫음
- ofstream 객체를 << 연산자와 함께 사용해 다양한 유형의 데이터를 출력

```
ofstream outFile;
ofstream fout;

outFile.open("test.txt");	// .txt에 쓰는 데 outFile 사용
char filename[50];
cin >> filename;		// 사용자가 이름을 지정한다.
fout.open(filename);	// 지정된 파일을 읽는 데 fout 사용
```

```
double wt = 125.8;
outFile << wt;		// .txt 에 하나의 수를 쓴다.
char line[81] = "Objectes are closer than they appear.";
fin << line << endl;	// 한 행의 텍스트를 쓴다.
```

파일 출력

```
#include <iostream>
#include <fstream>
using namespace std;

int main()
{
	char automobile[50];
	int year;
	double aPrice;
	double dPrice;

	ofstream outFile;	// 출력을 위한 객체 생성
	outFile.open("carinfo.txt");

	cout << "자동차 메이커와 차종을 입력: ";
	cin.getline(automobile, 50);
	cout << "연식 입력: ";
	cin >> year;
	cout << "구입 가격 입력: ";
	cin >> aPrice;
	dPrice = 0.913 * aPrice;
	
	cout << fixed;
	cout.precision(2);
	cout.setf(ios_base::showpoint);
	cout << "메이커와 차종: " << automobile << endl;
	cout << "연식: " << year << endl;
	cout << "구입 가격: " << aPrice << endl;
	cout << "현재 가격: " << dPrice << endl;

	outFile << fixed;

	outFile << fixed;
	outFile.precision(2);
	outFile.setf(ios_base::showpoint);
	outFile << "메이커와 차종: " << automobile << endl;
	outFile << "연식: " << year << endl;
	outFile << "구입 가격: " << aPrice << endl;
	outFile << "현재 가격: " << dPrice << endl;

	outFile.close();
	return 0;
}
```



읽기

파일 입력 방식 (cin 사용법과 유사)

```
ifstream inFile;
ifstream fin;

inFile.open("test.txt");
char filename[50];
cin >> filename;	// 사용자가 이름 지정
fin.open(filename);		// 지정된 파일을 읽는 데 fin 사용
```

```
double wt;
inFile >> wt;
char line[81];
fin.getline(line, 81);
```

존재하지 않는 파일을 여는 에러 방지
```
inFile.open("test.txt");
if (!inFile.is_open()) exit(EXIT_FAILURE);	// cstdlib 헤더 파일에 원형
```

파일 입력

```
#include <iostream>
#include <fstream>
#include <cstdlib>
using namespace std;

int main()
{
	const int size = 60;
	char filename[size];
	ifstream inFile;	// 파일 입력을 처리하기 위한 객체
	cout << "데이터 파일 이름 입력: ";
	cin.getline(filename, size);
	inFile.open(filename);	// inFile을 파일에 연결
	if (!inFile.is_open())	// 파일을 여는 데 실패하면
	{
		cout << filename << " 파일을 열 수 없습니다." << endl;
		cout << "프로그램 종료.\n";
		exit(EXIT_FAILURE);
	}
	double value;
	double sum = 0.0;
	int count = 0;		// 읽은 항목의 개수

	inFile >> value;	// 첫 번째 값을 얻는다.
	while (inFile.good())	// 입력이 양호하고 EOF가 아닌 동안
	{
		++count;	// 항목 개수 하나 추가
		sum += value;	// 누께 계산
		inFile >> value;	// 다음 값을 얻는다.
	}
	if (inFile.eof())
		cout << "파일 끝에 도달했습니다. \n";
	else if (inFile.fail())
		cout << "데이터 불일치로 입력 종료. \n";
	else
		cout << "알 수 없는 이유로 입력 종료. \n";
	if (count == 0)
		cout << "데이터가 없습니다. \n";
	else
	{
		cout << "읽은 항목의 개수: " << count << endl;
		cout << "합계: " << sum << endl;
		cout << "평균: " << sum / count << endl;
	}
	inFile.close();		// 파일 처리 종료

	return 0;
}
```


연습 문제
1. ch == ' '일 때 쓸 데 없이 뒤의 조건을 검사하지 않아도 된다.
2. [생략]

3.
Hi!
H$i$!$
$Send $10 or $20 now!
S$e$n$d$ $ct1 = 9, ct2 = 9

4. a. weight >= 115 && weight < 125
[이하 생략]
e. donation >= 1000 && donation <= 2000 || gust == 1
f. char chLower = tolower(ch); if (chLower >= 'a' && chLower <= 'z') {}

5. ㅇㅇ

6. x = x < 0 ? -x : x;
7. [생략]

8. 
정수 레이블을 사용할 때 q와 같이 정수형 아닌 것 => 정수 입력은 문자를 처리할 수 없으므로 맴돌이 수렁
문자 레이블을 사용하고 5와 같은 int형 수 입력 => 문자로 받아들임. default 부분에 의해 안전하게 처리됨

9.
```
int line = 0;
char ch;
while(cin.get(ch) && ch != 'Q')
{
	if (ch == '\n') line++;
}
```



프로그래밍 연습
[생략]