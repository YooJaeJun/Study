
1. C++ 입출력의 개요

C - 입력과 출력 기능을 컴파일러 설계자의 몫으로 남겨둠
C++ - 클래스들의 집합



스트림과 버퍼

C++ 프로그램은 입력과 출력을 바이트들의 흐름(스트림)이라고 간주한다.
	입력 시 프로그램은 입력 스트림으로부터 바이트들을 추출하고,
	출력 시 프로그램은 출력 스트림에 바이트들을 삽입한다.

	스트림은 프로그램과, 그 스트림의 발생지나 목적지 사이에서 중간 매개자 역할을 한다.

입력 절차
	하나의 스트림을 프로그램의 입력에 연결한다.
	그 스트림을 하나의 파일에 연결한다.

버퍼를 이용하면 입출력을 좀 더 효율적으로 처리함
	버퍼는 장치에서 프로그램으로 or 프로그램에서 장치로 정보를 전송하기 위해
		임시 저장 장치로 사용되는 메모리 블록
	
	버퍼 접근 방식은 디스크로부터 한꺼번에 많은 데이터를 읽어들여 버퍼에 저장해둠
	프로그램은 버퍼로부터 한 문자씩 읽어들임
		디스크로부터 읽어들이는 것보다 메모리로부터 읽어들이는 것이 훨씬 빠르기 때문

버퍼 비우기 flushing the buffer
	일반적인 C++ 프로그램은 Enter 누를 때 입력 버퍼를 비운다.
	출력 시에도 개행 문자 전달받으면 출력 버퍼를 비운다.



스트림, 버퍼, iostream 파일

클래스
	streambuf
		버퍼로 사용할 메모리 제공, 버퍼를 채우고, 버퍼의 내용에 접근하고, 버퍼를 비우고, 버퍼 메모리를 관리
	ios_base
	ios
	ostream
	istream
	iostream

			ios			streambuf
	ostream		istream
			iostream

			다중상속


스트림 객체
	cin
	cout
	cerr
	clog

객체가 스트림을 나타낸다.
	스트림의 한쪽 끝은 프로그램에, 다른 한쪽 끝은 표준 출력과 연결되어 있다.
	cout 객체는 streambuf 형 객체의 도움을 받아 스트림을 통과하는 바이트들의 흐름을 제어한다.



리디렉션
	표준 입력과 표준 출력을 위한 연결을 다른 쪽으로 변경할 수 있는 기능
	운영체제가 지원함
		C>counter
		Hello
		and Goodbye!
		Control-Z
		C>



2. cout을 이용한 출력

ostream 역할
	수치 데이터를 문자들의 스트림으로 변환



오버로딩된 << 연산자

비트 shift 이동 연산자를 ostream에서 재정의(삽입 연산자)



그 밖에..

연이어 출력하기
	cin.put('I').put('t');
	cout.write(state2, i) << endl;



출력 버퍼 비우기

조정자(manipulator)
	flush 조정자
		cout 버퍼 비우기
	endl 조정자
		버퍼를 비우고 개행 문자를 삽입



cout을 이용한 출력 형식 지정
	
형식 지정 관련 이야기
	지수(exponent)가 6이상이거나 -5이하면 E표기 사용


화면 출력을 위한 진법 변경

hex(cout);
	출력 형식 16진법
	cout << hex; 와 같게 연산자 오버로딩함

필드 폭
	cout.width()
	
채움 문자
	cout.fill('*');


부동 소수점수의 출력 정밀도 설정
	cout.precision(2);

뒤에 붙는 0과 소수점 출력
	cout.setf(ios_base::showpoint);
	20.4000

flag를 켠다.

출력 형식 지정 상수들
	ios::base::
		boolalpha		bool값 true, false로 입출력
		showbase		진법 표시 접두어
		showpoint		소수점
		uppercase		16진 출력. E표기에 대문자 사용
		showpos			양수 앞에 + 부호 사용


비트마스크 형
	개별적인 비트 값들을 저장하는 데 사용되는 데이터형
	정수형
	enum형
	STL bitset 컨테이너형

특정 비트를 0으로 만드는 것
	비트를 지운다.

setf(long, long)을 위한 매개변수들
ios_base::
	basefield
		dec 등
	floatfield
		fixed
			고정 소수점 표기 사용
		scientific
			과학적 E 표기 사용
	adjustfield
		left
		right
		internal

setf()는 비트들을 1로 설정
unsetf()는 비트들을 다시 0으로 설정


```
#include <iostream>
#include <iomanip>
#include <cmath>
using namespace std;

int main()
{
	cout << fixed << right;

	// iomanip 조정자들
	cout << setw(6) << "N" << setw(14) << "제곱근"
		<< setw(15) << "네제곱근\n";

	double root;
	for (int n = 10; n <= 100; n += 10)
	{
		root = sqrt(double(n));
		cout << setw(6) << setfill('.') << n << setfill(' ');
		cout << setw(12) << setprecision(3) << root;
		cout << setw(14) << setprecision(4) << sqrt(root) << endl;
	}
	return 0;
}
```
```
     N        제곱근      네제곱근
....10       3.162        1.7783
....20       4.472        2.1147
....30       5.477        2.3403
....40       6.325        2.5149
....50       7.071        2.6591
....60       7.746        2.7832
....70       8.367        2.8925
....80       8.944        2.9907
....90       9.487        3.0801
...100      10.000        3.1623
```



3. cin을 이용한 입력

형식이 설정된 입력 함수

호출한 객체의 참조를 리턴!
	즉, 입력도 연이어 할 수 있다.
	cin >> name >> fee >> ,,,


cin >>은 입력을 어떻게 보는가?
	지시된 데이터형의 한 단위. 데이터형과 일치하지 않는 첫 문자에 도달할 때까지 읽음
	-123z --> -123

eofbit
	파일 끝에 도달하면 1로 설정됨
badbit
	스트림이 손상되면 1로 설정됨. ex. 파일 읽기 에러 발생 시
failbit
	입력 연산이 기대하는 문자를 읽지 못하거나, 출력 연산이 기대하는 문자를 써 넣지 못하면 1로 설정
goodbit
	0을 다르게 표현

등등


상태 설정

입출력과 예외
	exceptions


스트림 상태 효과
```
while(cin >> input)
{
	sum += input;
}
if (cin.eof())
	cout << "EOF 발견되어 루프 종료\n";
```

스트림 상태를 다시 설정
	cin.clear();

cctype 함수
```
while(cin >> input)
{
	sum += input;
}
if (cin.fail() && !cin.eof())
{
	cin.clear();
	while(!isspace(cin.get()))
		continue;
}
else
{
	cout << "계속할 수 없엄\n";
	exit(1);
}
```


그 밖의 istream 클래스 메서드들


get(char&)와 get(void) 메서드는 화이트스페이스를 건너뛰지 않는 단일 문자 입력 기능 제공
get(char*, int, char)와 getline(char*, int, char) 함수는 한 단어가 아니라 행 전체를 읽어들이는 입력 기능


단일 문자 입력

특성				
	cin.get(ch)
	ch = cin.get()
입력 문자를 전달하는 방법		
	매개변수 ch에 대입					
	함수 리턴값을 사용하여 ch에 대입
	문자 입력에 대한 함수 리턴값	
	클래스 istream 객체에 대한 참조		 
	int형 값인 그 문자의 코드
	파일 끝에 대한 함수 리턴값		
	false로 변환						
	EOF


문자열 입력

getline(), get(), ignore()


그 밖에

read(), peek(), gcount(), putback()

```
#include <iostream>
using namespace std;
const int maxn = 10;
inline void eatline() { while (cin.get() != '\n') continue; }

int main()
{
	char name[maxn];
	char title[maxn];
	cout << "이름 입력: ";
	cin.get(name, maxn);
	if (cin.peek() != '\n')
		cout << "죄송합니다. 이름란이 좁아서 " << name << "만 적었습니다." << endl;
	eatline();
	cout << name << "씨! 직위 입력: \n";
	cin.get(title, maxn);
	if (cin.peek() != '\n')
		cout << "직위도 뒷부분 자름. \n";
	eatline();
	cout << "이름: " << name
		<< "\n직위: " << title << endl;

	return 0;
}
```




4. 파일 입력과 출력

간단한 파일 입출력

프로그램이 파일에 기록하려면?
	1 출력 스트림을 관리하기 위해 ofstream 객체를 생성한다.
	2 이 객체를 하나의 특별한 파일에 연결시킨다.
	3 cout을 사용하는 것과 동일한 방법으로 그 객체를 사용한다.
		유일한 차이는 출력이 화면으로 나가지 않고 파일로 나가는 것

fout 같은 ofstream 객체는, 프로그램으로부터 한 바이트씩 흘러 나오는 출력을 모아 두었다가,
	버퍼가 가득 차면 버퍼의 내용을 목적지 파일로 한 묶음으로 전송한다.

파일을 읽으려면?
	1 입력 스트림을 관리하기 위해 ifstream 객체를 생성한다.
	2 이 객체를 하나의 특별한 파일에 연결시킨다.
	3 cin을 사용하는 것과 동일한 방법으로 그 객체를 사용한다.


- open은 파일에 연결, close는 파일 연결을 해제하는 것이라 보면 될 듯
- close는 단지 파일과 연결이 끊어질 뿐, 스트림 관리 도구는 계속 역할을 유지한다. 관리하는 입력 버퍼와 함께 여전히 존재.

```
	// 2개 구문
	ifstream fin;
	fin.open("Text.dat");

	// 혹은 1개 구문
	ifstream fis("Text2.dat");
```

```
	char ch;
	fin >> ch;

	char buf[80];
	fin >> buf;

	fin.getline(buf, 80);

	string line;
	getline(fin, line);

	fin.close;
```


```
	#include <iostream>
	#include <fstream>
	#include <string>

	int main()
	{
		using namespace std;

		string filename = "input.txt";

		ofstream fout(filename.c_str());
		fout << "ㅎㅇ\n";
		fout.close();

		ifstream fin(filename.c_str());
		cout << filename << "파일의 내용: \n";
		char ch;
		while (fin.get(ch))
			cout << ch;
		cout << "프로그램 종료.\n";
		fin.close();

		return 0;
	}
```


스트림 검사와 is_open()
	스트림 상태 정보 0이면 정상
ex.
```
	fin.open(argv[file]);
	if (!fin)	// 열기 시도 실패
	{}
	// 혹은
	if (!fin.is_open())		// 열기 시도 실패. 더 미묘한 문제들도 검사.
	{}
```


여러 개의 파일 열기

```
	ifstream fin;
	fin.open("fat.txt");
	// ...
	fin.close();
	fin.clear();	// fin 다시 설정(컴파일러마다 필요 없을 수도 있음)
	fin.open("rat.txt");
	// ...
	fin.close();
```


명령행 처리

[생략]



파일 모드

파일 모드
	파일에 읽을 것인지, 파일에 기록할 것인지, 파일의 뒤에 내용을 덧붙일 것인지 등 파일이 사용되는 방법을 나타낸다.

'r', 'w', 'a', 'r+', 'w+' 등

파일에 덧붙이기

2진 파일 모드
	2진 파일과 텍스트 파일
		메모리에서 파일로 또는  파일에서 메모리로 데이터를 아무런 숨겨진 변환 없이 그대로 전송

```
	#include <iostream>
	#include <fstream>
	#include <iomanip>
	#include <cstdlib>

	inline void eatline() { while (std::cin.get() != '\n') continue; }

	struct planet
	{
		char name[20];
		double population;
		double g;
	};

	const char* file = "input.txt";

	int main()
	{
		using namespace std;
		planet pl;
		cout << fixed << right;

		// 초기의 내용을 화면에 표시
		ifstream fin;
		fin.open(file, ios_base::in | ios_base::binary);	// 2진 파일
		// 어떤 컴파일러는 ios_base::binary 모드를 받아들이지 않음

		if (fin.is_open())
		{
			cout << file << " 파일의 현재 내용은 다음과 같습니다: \n";
			while (fin.read((char*)&pl, sizeof pl))
			{
				cout << setw(20) << pl.name << ": "
					<< setprecision(0) << setw(12) << pl.population
					<< setprecision(2) << setw(6) << pl.g << endl;
			}
			fin.close();
		}

		// 새로운 데이터를 추가한다
		ofstream fout(file, ios_base::out | ios_base::app || ios_base::binary);

		if (!fout.is_open())
		{
			cerr << "출력을 위해 " << file << " 파일을 열 수 없습니다.\n";
			exit(EXIT_FAILURE);
		}

		cout << "행성의 이름을 입력하십시오(끝내려면 빈 줄 입력):\n";
		cin.get(pl.name, 20);
		while (pl.name[0] != '\0')
		{
			eatline();
			cout << "행성의 인구를 입력하십시오: ";
			cin >> pl.population;
			cout << "행성의 중력가속도를 입력하십시오: ";
			cin >> pl.g;
			eatline();
			fout.write((char*)&pl, sizeof pl);
			cout << "행성의 이름을 입력하십시오 (끝내려면 빈 줄 입력):\n";
			cin.get(pl.name, 20);
		}
		
		// 개정된 파일을 화면에 표시한다.
		fin.clear();
		fin.open(file, ios_base::in | ios_base::binary);
		if (fin.is_open())
		{
			cout << file << " 파일의 개정된 내용은 다음과 같습니다:\n";
			while (fin.read((char*)&pl, sizeof pl))
			{
				cout << setw(20) << pl.name << ": "
					<< setprecision(0) << setw(12) << pl.population
					<< setprecision(2) << setw(6) << pl.g << endl;
			}
			fin.close();
		}
		cout << "프로그램을 종료합니다.\n";

		return 0;
	}
```

	// 위 코드 이진 문자 포함되었다고 이상한 문자들만 입력됨


임의 접근

[생략]




5. 인코어 형식의 지정

sstream 계열
	string stream.
	string 객체에 형식이 지정된 정보를 기록하는 과정을 인코어 형식의 지정이라 한다.

ostringstream

```
	#include <iostream>
	#include <sstream>
	using namespace std;

	int main()
	{
		ostringstream outstr;
		double price = 380.0f;
		const char* ps = " copy";
		outstr.precision(2);
		outstr << fixed;
		outstr << "Pay only " << price << ps << endl;
		string result = outstr.str();
		cout << result;
		return 0;
	}
```
```
Pay only 380.00 copy
```

istringstream

```
	#include <iostream>
	#include <sstream>
	using namespace std;

	int main()
	{
		string s = "asdf zxcv";
		istringstream instr(s);
		string word;
		while (instr >> word)
			cout << word << endl;
		return 0;
	}
```
```
asdf
zxcv
```



연습 문제
1. iostream.h 파일은 입출력을 관리하는 클래스, 상수, 조정자들을 의미함
이 객체들은 입출력을 위해 사용되는 스트림과 버퍼를 관리함
이 파일은 모든 프로그램에 연결되는 표준 입력 스트림, 표준 출력 스트림들을 위해 사용되는 표준 객체들을 생성한다.

2. 키보드 입력은 연속된 문자들을 발생시킨다.
121을 타자하면 각각 한 바이트씩 2진 코드로 표현된 세 개의 문자가 발생함
int형으로 저장될 예정이라면, 이 세 문자는 값 121에 해당하는 하나의 2진 표현으로 변환되어야 함

3. 공통점: 표준 출력 장치인 모니터로 출력을 보낸다.
차이점: 출력을 파일로 리디렉션하는 운영 체제에서,
표준 출력: 파일에 연결됨
표준 에러: 계속 화면으로 연결됨

4. ostream 클래스는 각 타입에 대해 operator<<() 함수를 한 버전씩 정의함

5. ostream& 타입을 리턴하는 출력 메서드들은 길게 연결할 수 있다.
한 객체를 통해 메서드를 호출하면, 그 객체가 다시 리턴된다.

6. 
	int n;
	cin >> n;
	cout << setw(15) << n << hex << setw(15) << n
		<< oct << setw(15) << n << "\n";

7. 
	// 생략
	cout.setf(ios_base::showpoint);
	cout.setf(ios_base::fixed, ios_base::floatfield);
	cout.setf(ios_base::right, ios_base::adjustfield);

cout << setw(30) << name << setprecision(2)
	<< setw(10) << hourly << setprecision(1)
	<< setw(5) << hours << "\n";

8. ct1 = 5; ct2 = 9
cin >> ch 		화이트스페이스와 개행 문자들을 건너뜀
cin.get(ch) 	건너뛰지 않음

9. ignore은 80 문자 초과하면 바르게 동작하지 않고 처음 80개의 문자를 건너뛰기만 한다.




연습 문제
1. 입출력 위해 사용되는 스트림과 버퍼를 관리
2. 키보드 입력은 연속된 문자들을 발생
	121은 각각 한 바이트씩 2진 코드로 표현된 3개의 문자가 발생
3. 표준 출력은 파일에 연결 / 표준 에러는 화면으로 연결
4. cout이 정의된 ostream 클래스에서 operator<<() 함수를 각 기본 타입마다 한 버전씩 정의함
5. ostream& 타입 객체 리턴
6. 
	cout << hex << 100 << endl;
	cout << oct << 100 << endl;
7. -
8. ct1 = 5; ct2 = 9
	cin >> ~~ 화이트스페이스 제외하고 읽음
	cin.get(~~) Enter포함 화이트스페이스 포함해서 읽음
9. ignore() 입력 행이 80개의 문자를 초과하면 바르게 동작하지 않음
	처음 80개의 문자를 건너뛰기만 함
	