
A. 진법
플레이스 홀더 개념. 0 사용

Big Endian과 Little Endian
	Intel 기종 컴들은 Little Endian 방식으로 바이트를 저장
		낮은 바이트가 먼저 저장된다.




B. C++ 예약어

1. C++ 키워드

2. 대체 토큰 alternative token
	and wor compl(~) 등등

3. C++ 라이브러리 예약 이름
	reserved name
	_ 이나 __ 대문자 시작하는 이름들은 어떤 용도를 위해 예약한다.

4. 특별한 의미를 지닌 식별자
	컴파일러는 콘텍스트를 사용하여 일반적인 또는 언어 식별자로 쓰일 것인지 여부를 결정한다.
	int final;	// o
	int auto;	// x


C. ASCII 문자 세트




D. 연산자 우선순위

결합성
	왼쪽에서 오른쪽(L-R) 결합성
	오른쪽에서 왼쪽(R-L) 결합성

	같은 그룹에 속해 있는  연산자들은 같은 우선순위와 같은 결합성을 가진다.

우선순위 그룹
순위	연산자			결합규칙	의미	
1		::						사용 범위 결정 연산자
2		(expression)			괄호로 묶기
		()				L-R		함수 호출
		()						값 생성, 즉 type(expr)
		[]						배열 인덱스
		.						직접 멤버 연산자
		->						간접 멤버 연산자
		++						증가 연산자, 접미어
		--						감소 연산자, 접미어
		const_cast				특수화된 데이터형 변환
		dynamic_cast			특수화된 데이터형 변환
		reinterpret_cast		특수화된 데이터형 변환
		static_cast				특수화된 데이터형 변환
		typeid					데이터형 인식
3		!				R-L		논리 부정
		~						비트 부정
		+						단항 플러스
		-						단항 마이너스
		++						증가 연산자, 접두어
		--						감소 연산자, 접두어
		&						주소
		*						내용 참조(간접 값)
		()						데이터형 변환, (type) expr
		sizeof					바이트 단위의 크기
		alignof					alignment 요구치
		new						동적으로 메모리 대입
		new []					동적으로 배열 대입
		delete					동적으로 대입된 메모리 해제
		delete []				동적으로 대입된 배열 해제
		noexcept				연산이 예외를 나타낼 경우 거짓을 리턴한다.
4		.*				L-R		멤버 내용 참조
		->*						간접멤버 내용 참조
5		*, /, %			L-R 
6		+, -			L-R		
7		<<, >>			L-R		비트들을 왼, 오른쪽으로 시프트
8		<, <=, >=, >	L-R		
9		==, !=			L-R
10		&				L-R		비트 AND
11		^				L-R		비트 XOR(배타적 OR)
12		|				L-R		비트 OR
13		&&				L-R		논리 AND
14		||				L-R		논리 OR
15		:?				R-L		조건식
16		=, *=, /=, %=	R-L		00 후 대입
		+=, -=
		&=, ^=, |=				비트 AND, XOR, OR 후 대입
		<<=, >>=
17		throw			L-R		예외 발생
18		,				L-R		두 수식을 하나로 결합


단항(unary), 이항(binary) 연산자

```
	char* str = "Whoa";
	char ch = *str++ 
	char ch = *++str;
```
	에서 ++가 *보다 연산자 우선순위가 더 높다. 
	*str 대입 후, 포인터 str++ 증가. 위에선 'h' 지시함

	++ 접두는 *와 우선순위 같다. R-L
	포인터 str이 증가된 후 str이 지시하는 내용이 ch 대입


		

E. 다른 연산자들

<<, >>

```
int x = 20;
int y = x << 3;
```
	x의 값 변경하지 않음

어떤 시스템에선 시프트 연산자 사용이 곱셈 나눗셈 연산보다 더 빠르나,
	컴파일러가 점점 더 코드를 최적화하고 있기 때문에 그러한 차이가 없어지고 있다.



비트 논리 연산자

~x
	보수(complement)
	1-0 전환
|, ^ 등



비트 연산자의 다른 표기 방식
	comple, bitand 등 비트연산자 기호들이 문자 세트에 업는 국가들을 위한 것



자주 사용하는 비트 연산자 테크닉

비트 연산자

비트 on
```
	target = target | bit;
	target |= bi;
```
	비트 항상 1로 설정
	1또는0을 1과 OR연산하면 항상 1


비트 반전
```
	target = target ^ bit;
	target ^= bit;
```
	1 XOR 0 == 1
	// 1과 1 XOR 하면 1인데, 0으로 설명했네..


비트 off
```
	target = target & ~bit;
	// target &= ~bit;
```


비트 값 검사
```
	if (target & bit)
```
	특정 비트 1로 설정됐는지 알고 싶을 때



E2. 멤버 내용 참조 연산자

```
	int Example::*pt = &Exaple::inches;	// 초기화
	cout << ob1.*pt << endl;	// ob1의 inches 멤버를 출력한다.
```

.*와 ->*
	멤버 내용 참조 연산자(member dereferencing operator)



E3. alignof(C++11)

데이터가 메모리에 저장되는 방식에 제한둘 수 있다.

alignof(int)	// 4
	4의 배수의 정렬 범위


구조체 크기

```
	#include <bits/stdc++.h>
	using namespace std;

	struct things1
	{
		char ch;
		int a;
		double x;
	};

	struct things2
	{
		int a;
		double x;
		char ch;
	};

	int main()
	{
		cout << sizeof(things1) << endl;	// 16
		cout << sizeof(things2) << endl;	// 24
		return 0;
	}
```
```
	16
	24
```



E4. noexcept(C++11)

예외-->거짓 리턴

	// 외부 자료 찾아서 공부해야 함




F. string 템플릿 클래스

F1. 13개의 데이터형과 하나의 상수


F2. 데이터 정보, 생성자, 기타

	size capacity

resize
	n > npos면 out_of_range 예외 발생
	그렇지 않으면 문자열 크기를 n으로 변경함
	n < size()면, 문자열의 끝을 잘라 버린다.
	n > size()면 문자열 charT(0) (== null)문자로 그 문자열을 채운다.

reserve
	capacity()를 res_arg보다 크거나 같게 설정함
	문자열을 다시 대입하므로 이전 참조, 이터레이터, 이전 문자열 포인터가 더 이상 유효하지 않다.



F3. 문자열 접근

	at(): out of range 예외 검사해줌
	[]: 실행속도 더 빠름



F4. 기본적인 대입



F5. 문자열 검색

	검색 실패 string::npos
	rfind: 문자열or문자의 최종 발생 위치 찾기



F6. 비교 메서드와 함수

	compare(처음, 끝, 비교할 문자);



F7. 문자열 변경

	append
	assign
	insert
	erase
	replace
	copy
	swap



F8. 출력과 입력




G. STL 메서드와 함수

1. STL과 C++11

	vector emplace_back

emplacement
	가변인자 템플릿과 함수 매개변수 팩(18장)이 추가되어 임플레이스먼트 메서드가 가능
	move semantics처럼 효율성을 높이는 수단

	vt.push_back(items(2.2, 4.4, 2));
		메모리 대입 함수를 통해서 vt. 끝부분에 디폴트 아이템 객체 생성
		그런 다음, Items() 생성자는 임시 Items 객체를 생성
		이 객체는 vector vt의 전면부 위치로 복사되고 임시 객체 삭제됨

	vt.emplace_back(2.2, 4.4, 2);
		함수 매개변수 팩을 지닌 가변인자 템플릿 
		template<class... Args> void emplace_back(Args&&... args);
		이 매개변수들은 대입 함수로 전달된 다음 풀어서 
		디폴트 생성자 대신 세 개 매개변수와 함께 Items 생성자를 생성
		즉, Items(args...)를 사용할 수 있어서, Items(2.2, 4.4, 2)로 확장됨
		따라서, 원하는 객체는 임시 위치가 생성되어 vector로 복사되는 것이 아니고, vector 내부에 생성됨




2. 모든 컨테이너에 공통인 멤버들

	value_type
	reference
	difference_type		이터레이터 사이의 거리
	등


	X u = a;		복사 생성자
	등




G3. 시퀀스 컨테이너를 위한 추가 멤버들

시퀀스 컨테이너
	vector, forward_list, list, deque, array 템플릿 클래스 모두 시퀀스 컨테이너
	순차적으로 순서를 가진 동일한 종류의 아이템 세트를 지님

	splice
	remove_if
	unique
	merge




G4. 집합과 맵에 사용되는 다른 멤버들

결합 컨테이너
	트리 기반



G5. 순서가 부여되지 않은 연관 컨테이너(C++11)

unordered_
	해시 맵 기반


G6.  STL 함수들

무변경(non-modifying) 시퀀스 연산
변경(multating) 시퀀스 연산
소밑 및 관련된 연산자
수치 연산

	is_permutation
	partial_sort()

	copy_n
	shuffle
	move

	includes
	minmax	pair로 반환

	accumulate




H. 좋은 읽을거리와 인터넷 리소스
I. ANSI/ISO 표준 C++로 전환

1. 전처리기 지시자의 대체
#ifdef


#define 대신 const로 상수 정의

C++의 const는 변수들과 C의 const가 디폴트로 사용하는 외부 링크(external linkage) 대신,
	외부 const 값들에 대해서 내부 링크(internal linkage)를 사용한다.
	const 사용되는 파일 안에서 정의된 const를 요구한다.
	여러 개의 파일들이 공통으로 사용하는 하나의 헤더 파일 안에 const 정의들을 모아놓을 수 있다.
	이것은, 내부 링크에 대해서는 에러를 발생시키지 않지만, 외부 링크에 대해서는 컴파일 에러 발생

#ifndef
#define
#endif
은 컴파일 제어 용도로 여전히 유효


#define 대신 inline 짧은 함수 정의
	z++ 같은 값을 사용하는 경우 제대로 처리하지 못함
	


2. 함수 원형 사용하기
3. 데이터형 변환
4. malloc, free ==> new delete
5. 새로운 헤더 파일 체계 사용하기
6. 이름 공간 사용하기
7. 스마트 포인터
8. string 클래스 사용하기
9. STL 사용하기

