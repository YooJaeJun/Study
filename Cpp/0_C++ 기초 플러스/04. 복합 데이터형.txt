배열은 복합 데이터형이다.
- compound type. (c는 derrived type)

배열 미초기화 시
- 배열 원소의 값들은 미확정 상태로 남는다.
- 그 메모리 위치에 전부터 우연히 남아 있던 쓰레기들을 값으로 취한다.



문자열 표기
화이트 스페이스로 분리된 문자열 상수는 하나의 문자열 상수로 결합됨
	string s = "asdf " "xzcv";
	cout << s << endl;

크기
- strlen()은 널 문자 전까지 셈
- 즉, 배열의 최소 크기는 strlen(변수) + 1 이어야 함

cin
- 빈칸, 탭, 캐리지 리턴과 같은 화이트스페이스가 있으면 그 위치에서 문자열이 끝난 것으로 간주
- 즉 char[] => cin은 하나의 단어만 읽어 배열에 저장하고 널 문자를 끝에 추가

getline()
- 개행 문자를 읽어서 폐기
- cin.getline(name, 20)
- => 19개 이하 문자 저장

get()
- 입력 큐에 개행 문자를 남겨둔다.
- cin.get(name, size); cin.get(name2, size); 
- => 문제. 두 번째 호출이 개행 문자를 첫 문자로 만나 행의 끝에 도달했다고 결론내림
- cin.get(name,size); cin.get(); cin.get(name2, size);
- => ㅇㅋ
- cin.get(name, size).get();
- => ㅇㅋ.

cin.clear()
- 빈 행을 읽으면 failbit라는 것이 설정됨
- 계속되는 입력을 막고, 입력을 복원

```
#include <iostream>

int main()
{
	using namespace std;
	int year;
	cout << "연도입력: ";
	cin >> year;
	// cin.get();	// 개행 문자를 읽어 허공에다 버려야 정상 작동
	cout << "도시입력: ";
	char address[70];
	cin.getline(address, 70);
	cout << "연도: " << year << endl;
	cout << "도시: " << address << endl;
	cout << "완료!\n";
	return 0;
}
```
```
연도입력: 1
도시입력: 연도: 1
도시:
완료!
```



3. string

초기화되지 않은 데이터에서 첫 널 문자가 나타나는 위치는 본질적으로 랜덤하다.
- strlen(char[]형) 시 문자열의 길이는 배열의 크기보다도 크게 나온다.

strcat
	String Concatenate
	문자열 이어 붙임

문자열 상수 초기화 시 접두사
```
	wchar_t title[] = L"asdf";
	char16_t name[] = u"zxcv";
	char32_t car[] = U"qwer";
```

C++11
- UTF-8이라는 유니코드 문자를 위한 인코딩 방법을 지원함
- raw 문자열 지원  R"(   ~~   )"
```
	cout << R"( Jim "King" Tutt uses "\n" instead of endl . )" << '\n';
	// cout << "( Jim \"King\" Tutt uses \"\\n\" instead of endl . )" << '\n';
```
- 똑같은 문자들이 "와 ( 사이에 껴도 됨 ex. R"+*( ~~~ )+*"
```
	cout << R"+*("(who wouldn't?)", she whispered.)+*" << endl;
```



4. 구조체

구조체 안의 비트필드
- 구조체 멤버들이 각각 일정 비트 수를 차지하도록 지정
- 레지스터에 대응하는 데이터 구조 등 저수준 프로그래밍에서 주로 사용
```
struct A
{
	unsigned a : 4;
	bool b : 1;
};
```




5. 공용체

서로 다른 데이터형을 한 번에 한 가지만 보관할 수 있는 데이터 형식

```
#include <iostream>
using namespace std;

union one4all
{
	int intVal;
	long longVal;
	double doubleVal;
};

int main()
{
	one4all pail;
	pail.intVal = 15;
	cout << pail.intVal << endl;
	pail.doubleVal = 1.38;
	cout << pail.doubleVal << endl;	// double 형을 저장, int 형 값은 소실
	cout << pail.intVal << endl;
}
```
```
15
1.38
-515396076
```

크기
- 공용체의 크기 == 가장 큰 멤버의 크기
- 여러 가지 데이터형을 사용할 수 있지만 동시에 사용할 수 없을 때, 메모리 절약 가능

익명 공동체(anonymous union)은 이름이 없다.






6. 열거체

enum형의 객체는 enum 내부 열거자 값들만 대입 가능

```
#include <iostream>
using namespace std;

enum spectrum { red, orange, };

int main()
{
	spectrum band;
	band = red;
	band = 2000;	// 오류
}
```

타입
- 정수형
- int형으로 승급될 수 있다.

열거체의 값 범위
- 어떤 정수값이 그 범위 안에 들어 있으면, 그것이 열거자 값이 아니더라도
- 데이터형 변환을 통해 열거체 변수에 대입할 수 있다.

```
#include <iostream>
using namespace std;

enum bits { one = 1, two = 2, four = 4, eight = 8 };

int main()
{
	bits myflag;
	myflag = bits(6);	// 맞다. 6이 bits 범위 안에 들어있다.	-> int 범위까지 다 들어가네
	cout << myflag;
}
```

열거체의 값 상한
- 열거자 값 중 최대값보다 큰 2의 최소 거듭제곱 - 1

열거체의 값 하한
- 열거자 값 중 최소값이 0 이상이라면 0
- 열거자 값 중 최소값이 0 미만이라면,  
	ex. -6이면 6보다 큰 2의 거듭제곱 8 - 1, 여기에 마이너스 붙여 -7





7. 포인터

객체 지향 프로그래밍
- 컴파일 시간이 아닌 실행 시간에 어떤 결정을 내린다는 것을 강조

포인터 *
- 간접값(indirect value) 연산자, 간접 참조(dereferencing) 연산자

* 위치
전통 C 프로그래밍 방식
- int *ptr;
- *ptr가 int형임을 강조

C++ 프로그래밍 방식
- int* ptr;
- int* 형 자체가 하나의 데이터형임을 강조


new - delete
```
	int jugs = 5;
	int* pi = &jugs;
	delete pi;		// new로 대입한 메모리가 아니므로 틀리다.
```
```
	int* ps = new int(5);
	int* pq = ps;
	delete pq;
	delete ps;	// 에러. 이미 delete된 변수를 가리키는 포인터 변수를 또 delete
```

정적 바인딩(static binding)
- 프로그램이 컴파일 될 때 배열을 위한 메모리가 대입
동적 바인딩(dynamic binding)
- 프로그램을 실행하는 동안 배열의 크기 결정

널 포인터에는 delete를 사용하는 것이 안전
- 아무 일도 일어나지 않음

포인터 변수에 1을 더하면 그 포인터가 지시하는 데이터형의 바이트 수만큼 값이 증가한다.

포인터를 적당한 주소로 초기화하지 않은 상태에서 간접 참조에 사용하면 안 된다.

배열 이름에 sizeof 연산자 적용 시, 배열의 첫 번째 원소의 크기가 아니라 배열의 전체 크기가 바이트 단위로 리턴


strcpy, strlen 등 예제

```
#include <iostream>
#include <cstring>
#pragma warning(disable:4996)
using namespace std;

int main()
{
	char lion[10] = "사자";
	char* ps;
	ps = lion;

	cout << "strcpy() 사용 전 \n";
	cout << (int*)lion << ": " << lion << endl;
	cout << (int*)ps << ": " << ps << endl;

	ps = new char[strlen(lion) + 1];
	strcpy(ps, lion);

	cout << "strcpy() 사용 후 \n";
	cout << (int*)lion << ": " << lion << endl;
	cout << (int*)ps << ": " << ps << endl;
}
```
```
strcpy() 사용 전
000000A85BB2F998: 사자
000000A85BB2F998: 사자
strcpy() 사용 후
000000A85BB2F998: 사자
00000228A9B92110: 사자
```

strcpy 위험
- 배열의 크기를 벗어나는 나머지 부분을 배열에 바로 이어서 저장하기 때문에,
- 프로그램이 사용하고 있는 다른 내용을 덮어버릴 수 있다.
- strncpy() + 복사할 최대 문자수 사용
- 그러나 이 함수는 저장 공간이 바닥이 나는 경우에 널 문자를 추가하지 않는다.
- 하여, 다음과 같이 사용
```
#include <iostream>
#include <cstring>
#pragma warning(disable:4996)
using namespace std;

int main()
{
	char food[20] = "food";
	strncpy(food, "a picnic basket filled with many goodies", 19);
	cout << food << endl;
	food[19] = '\0';
	cout << food << endl;
}
```
```
a picnic basket fil
a picnic basket fil
```
// 디버깅해보니 넣어주는데..?



메모리를 대입하는 방법에 따라 구분하는 공간
- 자동 공간, 정적 공간, 동적 공간

자동 공간(automatic storage)
- 함수 안에서 정의되는 보통의 변수들 == 자동 변수
- 스택에 저장

정적 공간
- 프로그램이 실행되는 동안 지속적으로 존재하는 공간
- static ~

동적 공간(자유 공간, free store, 힙, heap)
- 자유 공간이라 불리는 메모리 풀(memory pool)을 관리
- 메모리 누수 조심





9. 변수형의 조합

더블 포인터 활용

```
#include <iostream>
using namespace std;

struct A { int a; };

int main()
{
	A a1, a2, a3;
	a1.a = 1;
	A* pa = &a2;
	pa->a = 2;

	A aArr[3];
	aArr[0].a = 3;
	cout << aArr->a << ' ';

	const A* pArr[3] = { &a1, &a2, &a3 };
	cout << pArr[1]->a << ' ';

	const A** ppArr = pArr;
	cout << (*ppArr)->a << ' ';

	auto ppb = pArr;	// 자동 형태 추측
	cout << (*(ppb + 1))->a << ' ';	// 1번 인덱스 접근
}
```
```
3 2 1 2
```





10. 배열의 대안

vector

array (C++11)
- 고정 배열 템플릿

고정 배열 vs std::vector vs std::array

```
#include <iostream>
#include <vector>
#include <array>
using namespace std;

int main()
{
	// C, Original C++
	int a1[4] = { 1, 2, 3, 4 };

	// C++98 STL
	vector<int> a2 = { 5, 6, 7, 8 };

	// C++11 
	array<int, 4> a3 = { 9, 10, 11, 12 };
	array<int, 4> a4;
	a4 = a3;

	cout << "고정배열 \n";
	for (int i = 0; i < 4; i++) cout << "a1[i]: " << a1[i] << ' ' << "주소: " << &a1[i] << endl;
	cout << '\n';

	cout << "vector \n";
	for (int i = 0; i < 4; i++) cout << "a2[i]: " << a2[i] << ' ' << "주소: " << &a2[i] << endl;
	cout << '\n';

	cout << "array \n";
	for (int i = 0; i < 4; i++) cout << "a3[i]: " << a3[i] << ' ' << "주소: " << &a3[i] << endl;
	cout << '\n';
}

```
```
고정배열
a1[i]: 1 주소: 000000D82C32F668
a1[i]: 2 주소: 000000D82C32F66C
a1[i]: 3 주소: 000000D82C32F670
a1[i]: 4 주소: 000000D82C32F674

vector
a2[i]: 5 주소: 0000024705D12110
a2[i]: 6 주소: 0000024705D12114
a2[i]: 7 주소: 0000024705D12118
a2[i]: 8 주소: 0000024705D1211C

array
a3[i]: 9 주소: 000000D82C32F6D8
a3[i]: 10 주소: 000000D82C32F6DC
a3[i]: 11 주소: 000000D82C32F6E0
a3[i]: 12 주소: 000000D82C32F6E4
```



array 특징
- 주소를 통해서 array 객체가 동일한 지역의 메모리를 사용한다. (예제의 경우 stack)
- 반면 vector 객체는 자유 저장 또는 heap에 저장


[] 배열 첨자(bracket notation) vs .at() 멤버
- at() 사용 시 유효하지 않은 인덱스가 런타임과 프로그램 도중에 디폴트에 의해 잡히게 되어 전격 취소된다. ?
- 첨자의 범위를 체크하는지, 범위를 벗어난 접근일 경우 예외 발생하는지
	[]는 안 함, at()은 함




연습문제
1. 생략
2. array<char, 30> actors;
나머지 생략

3. ~  9. 생략

10. enum Response { No, Yes, Maybe };
11. 생략
12. 
float treacle[10] = {1,2,3,4,5,6,7,8,9,10};
cout << *treacle << ' ' << *(treacle + 9);

13. 
int n;
cin >> n;
int* arr = new int[n];
delete[] arr;

14. 문자열 첫 요소의 주소값
15. 생략
16. // 다시 공부하기
17. 생략



문제
1. char actors[30];
2. array<char, 30> actors;
3. int arr[5]{1,3,5,7,9};
4.
5. cout << ideas[1];
6.
7.
8.
9.
10.
11. double ted = 3.14;
	double* pted = ted;
12. float treacle[10]{};
	cout << *treacle << ' ' << *(treacle + 10);
13. 
14. 문자열이 시작되는 주소 출력
15. 
16. 화이트스페이스가 아닌 문자가 나타날 때까지 화이트스페이스를 무시한다.
	그러고 나서 다음 번 화이트스페이스가 발견될 때까지 문자들을 읽는다.
	그러므로 수치를 읽어 들인 후 Enter 키가 만들어 낸 개행 문자(carriage return)을 건너뛰게 되므로 그 문제는 해결됨.
17. 