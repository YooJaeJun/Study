
C++
- 메모리에 여러 가지 방법으로 데이터를 저장
- 기억 존속 시간, 사용 범위, 링크 등을 사용자가 선택
- 동적 대입
- 이름 공간(namespace)
	- 데이터 접근을 사용자가 추가로 제어할 수 있도록 함



1. 분할 컴파일

- C++ 컴파일러는 링커 프로그램도 관리.
- 하나의 파일을 수정했다면, 그 파일 하나만을 다시 컴파일해서,
- 이미 컴파일되어 있는 다른 파일들과 링크
- 규모가 큰 프로그램을 쉽게 관리할 수 있게 해줌


<xx.h>
- 꺾쇠는 컴파일러는 표준 헤더 파일들이 들어있는 호스트 시스템의 파일 시스템 영역를 찾는다.

컴파일 과정
1. 두 개의 소스 파일에 대해 컴파일 명령
2. 전처리기가 포함시킨 파일을 소스 코드에 결합
3. 컴파일러가 각각의 소스 코드 파일에 대해 하나씩 목적 코드 파일을 만든다.
4. 링커가 목적 코드 파일들을 라이브러리 코드와 시동 코드와 결합하여 실행가능 파일을 만든다.

헤더 파일 보호 기법
// 요즘은 자동 생성되는 #pragma once 로... 물론 모든 링크 오류를 해결해주진 않는다.


- C++ 표준은 파일이라는 용어 대신 번역 단위(translation unit)이라는 용어를 사용


다중 라이브러리 링크
- 서로 다른 컴파일러로 만든 이진화 모듈(목적 코드 파일)은 서로 잘 링크되지 않는다.
- 이름 장식, 이름 맹글링을 컴파일러에 필요한 만큼 구현할 수 있도록 허용되었기 때문..
- 즉, 서로 다른 컴파일러들은 하나의 동일한 함수에 대해 !서로 다르게 장식한 이름!을 만들어 낸다.
- 이 이름의 차이가 함수 정의에 대응시키려는 링커의 작업을 방해함
- 내 컴파일러로 소스 코드를 다시 컴파일하기



2. 기억 존속 시간, 사용 범위, 링크

C++은 네 가지 유형으로 데이터 저장

1. 자동 기억 존속 시간(automatic storage duration)
- 함수 매개변수를 포함하여, 함수 정의 안에 선언된 변수는 자동 기억 존속 시간을 가진다.
- 프로그램 실행이 정의된 함수나 블록 안에 들어갈 때 생성
- 프로그램 실행이 함수나 블록 떠날 때 해제.
- 두 종류

2. 정적 기억 존속 시간(static storage duration)
- 프로그램 실행 동안 존속.
- 세 종류

3. 쓰레드 존속 시간(Thread Storage Duration(C++11))
- 멀티코더 프로세서를 사용하여 연산 작업을 thread 단위로 쪼개서 처리

4. 동적 기억 존속 시간(dynamic storage duration)
- new - delete 해제되거나 프로그램이 종료할 때까지 존속
- 자유 공간(free store)


사용 범위(scope)와 링크

사용 범위
- 어떤 이름이 하나의 파일(번역 단위) 안에서 얼마나 널리 알려지는가

링크(linkage)
- 서로 다른 번역 단위들이 이름을 공유하는 것
- 외부 링크(external linkage)를 가진 이름은 여러 파일들이 공유할 수 있다.
- 내부 링크(internal linkage)를 가진 이름은 한 파일 안에 있는 함수들만 공유할 수 있다.
- 자동 변수는 공유되지 않기 때문에 자동 변수의 이름은 링크를 갖지 않는다.

사용 범위
- 지역 사용 범위
	- 자동 변수
- 전역 사용 범위
	- 파일 사용 범위라고도 함
- 클래스 사용 범위 class scope
- 이름공간 사용 범위
	- 전역 사용 범위는 이름 공간 사용 범위의 특별한 경우.

- 정적 변수는 어떻게 정의되는가에 따라 지역 사용 범위와 전역 사용 범위 중에 어느 하나를 가진다.

- 함수는 전역 사용 범위, 클래스 사용 범위, 이름 공간 사용 범위를 가질 수 있다.
	- 지역 사용 범위는 xx


신규 정의가 이전 정의의 앞을 가린다.

"사용 범위 안으로 복귀한다."
- 같은 이름의 새로운 정의가 앞을 가렸다가 메모리가 해제되면 그 전 같은 이름의 변수를 다시 사용할 수 있다.


자동 변수와 스택

프로그램은 두 개의 포인터를 이용하여 스택을 관리
- 스택의 바닥, 스택의 꼭대기

스택
- LIFO(lastin, firstout; 후입선출) 설계


레지스터 변수
- C는 register 키워드를 제공하여 컴파일러가 CPU 레지스터를 사용해서 자동 변수를 저장할 것을 제안함


정적 변수
- 세 가지 유형의 링크(외부 링크, 내부 링크, 링크 없음)를 가지는 정적 변수를 제공.
- 모두 프로그램 실행 시간부터!! 종료될 때까지 전체 시간동안 존속
- 사용 범위: 선언된 지점부터 파일의 끝에 이르는 범위까지.
- 정적 배열의 원소, 구조체의 멤버 0으로 초기화함 (zero-initialized)

1. 외부 링크를 가지는 정적 변수 
- 어떠한 블록에 속하지 않는 완전한 바깥에서 선언

2. 내부 링크~
- 어떠한 블록에 속하지 않는 바깥에서 선언하되, static이라는 기억 공간 제한자를 선언 앞에

3. 링크 없는 정적 변수
- static 제한자 사용해 블록 안에서 선언


참조 선언 혹은 단순히 선언
- 또 다른 변수 선언 방식
- 기존의 변수를 의미하여 저장소를 생성하지 않는다.
- extern 키워드를 사용하고 초기화를 제공하지 않는다.
- 그렇지 않을 경우, 선언은 정의이며 저장소가 대입되도록 한다.

```
double up;	// 정의, up은 0
extern int blem;	// blem은 다른 지역에서 정의된다.
extern char gr = 'z';	// 초기화되므로 선언이다.
```

유일 정의 원칙
- 오직 한 개의 파일이 그 변수에 대한 정의를 지닐 수 있다.

```
// file01.cpp
extern int cats = 20;	// 초기화되므로 정의에 해당된다.
int dogs = 22;		// 정의에 해당된다
int fleas;		// 정의에 해당된다
...
// file02.cpp
extern int cats;	// 정의에 해당되지 않음
extern int dogs;	// extern에 해당되며 초기화되지 않는다.
```

사용 범위 결정 연산자 scope resolution operator
- ::
- 그 변수의 전역 버전을 사용하라


1. 정적 존속 시간, 외부 링크
- extern

2. 정적 존속 기간, 내부 링크
서로 다른 파일에서 서로 다른 변수들에 같은 이름을 사용하고 싶을 때
- static 선언

3. 정적 기억 존속 시간, 링크 없음
- 블록 안 static
- 한 번만 초기화되므로


제한자

기억 공간 제한자(storage class specifier)
1. auto (C++11부터 제한자에서 빠짐)
2. register
3. static
4. extern
5. thread_local (C++11에서 추가됨)
6. mutable

Cv-제한자
1. const 
2. volatile

volatile
- 코드가 변경되지 않더라도 특정 메모리 위치에 있는 값이 변경될 수 있다는 것을 나타냄
- 컴파일러의 최적화 능력을 개선하는 것
	- 예시로, 컴파일러가 고작 몇 개의 구문 안에 어떤 변수의 값이 두 번 사용되고 있는 것을 발견했을 때
	- 컴파일러는 프로그램이 그 값을 두 번 조사하게 하지 않고, 레지스터에서 직접 그 값을 캐시.
	- 그 변수가 두 번 사용되는 동안에 값이 변하지 않는다고 가정함
	- volatile로 선언하면 컴파일러의 이런 최적화를 수행하지 못하도록 막음

mutable
- 특정 클래스가 const로 선언되어 있더라도 그 구조체의 특정 멤버를 변경할 수 있음을 나타냄

```
#include <iostream>
using namespace std;

struct dataa
{
	char name[30];
	mutable int accesses;
};

int32_t main()
{
	const dataa veep = { "zzz", 0 };
	strcpy(veep.name, "asdf");	// 허용안됨
	veep.accesses++;			// 허용됨
	return 0;
}
```

const
- 디폴트 기억 공간을 약간 바꾼다.
- 전역 변수는 외부 링크를 갖도록 디폴트로 내정되어 있지만,
- const 전역 변수는 내부 링크를 갖도록 디폴트 내정된다 !!!
- static 제한자가 사용된 것처럼 취급됨.

- 내부 링크는 각 파일들이 상수 집합을 공유하지 않고 자신만의 상수 집합을 따로 가진다는 것을 의미함
- 각각의 정의는 그들이 들어있는 파일에 개별적
- 상수 정의들을 헤더 파일에 넣는 것이 좋은 이유가 바로 이것.
- 동일한 헤더 파일을 두 개의 소스 코드 파일에 넣으면, 두 파일은 동일한 상수 집합을 갖게 된다.

- 어떤 이유로 상수를 외부 링크로 만들어야 한다면, extern 키워드를 사용해 디폴트로 된 내부 링크를 가릴 수 있다.
```
extern const states = 50;	// 외부링크
```
- 그리고 그 상수를 사용하는 모든 파일에서 extern 키워드로 그 상수를 선언해야 함
- 보통의 외부 변수를 정의할 때는 extern 키워드를 사용하지 않고, 그 변수를 사용하는 다른 파일에 키워드를 사용해야 했으나,
- const는 다름
- 이때 보통의 변수와는 다르게, extern const 값은 초기화할 수 있다.


함수와 링크
static 
- 함수에 내부 링크를 부여
- 함수의 사용 범위를 하나의 파일로 제한함
- 함수 원형과 함수 정의에 같이 적용함
- 정적 선언이 들어 있는 파일에서 외부 정의를 무시


언어 링크 language linking

- 링커는 구별되는 각 함수마다 서로 다른 기호 이름을 요구함
- C 컴파일러는 내부적인 목적으로 함수 이름을 변환할 수 있음 
	- ex. aaa() -> _aaa()
- C++ 컴파일러는 이름 맹글링(name mangling) 또는 이름 장식(name decoration) 과정을 거친다.
	- aaa(int) -> _aaa_i
	- aaa(double, double) -> _aaa_d_d
- 이를 C++ 언어 링크(language linkage)라 한다.

```
extern "C" void aaa(int);	// C 프로토콜
extern void aaa(int);		// C++ 프로토콜
extern "C++" void bbb(int);	// C++ 프로토콜
```


기억 공간 형식과 동적 대입

중괄호를 이용한 리스트 초기화
```
	struct where { double x, y, z; };
	where* one = new where { 2.5, 5.3, 7.2 };	// C++11
	int* ar = new int[4] { 2, 4, 6, 7 };		// C++11
```

new 실패
- 필요한 메모리 양을 확보할 수 없는 경우
- std::bad_alloc 예외 반환
```
	std::bad_alloc b;
	cout << b.what();	// 출력: bad allocation
```

```
int* pa = new int[40];
int* pa = new(40 * sizeof(int));
```

위치 지정 new 연산자

```
#include <iostream>
#include <new>
using namespace std;

struct chaff
{
	char dross[20];
	int slag;
};
char buffer1[50];
char buffer2[500];

int main()
{
	chaff* p1, * p2;
	int* p3, * p4;
	// new의 일반 형식
	p1 = new chaff;
	p3 = new int[20];
	// 위치 지정 new의 두 형식
	p2 = new (buffer1) chaff;	// 구조체를 buffer1에 놓는다.
	p4 = new (buffer2) int[20];	// int 배열을 buffer2에 놓는다.

	cout << "Size: " << sizeof(buffer1) << ' ' << sizeof(buffer2) << '\n';
	cout << (void*)buffer1 << ' ' << (void*)buffer2 << '\n';

	return 0;
}
```
```
Size: 50 500
00007FF6D614F440 00007FF6D614F480
```


3. 이름 공간

용어 몇 가지

선언 영역 declarative region
- 변수가 선언된 영역

잠재 사용 범위 potential scope
- 선언한 지점부터 선언 영역의 끝까지
- 처음 정의한 지점의 위에서는 사용할 수 없다. 선언 영역보다 좁다.

이름 공간은 블록 안에 놓일 수는 없다.
- 하나의 이름 공간에 선언된 이름은, 상수를 참조하지 않으면 기본적으로 외부 링크를 가진다.


전역 이름 공간 global namespace
- 파일 수준의 선언 영역

```
namespace Jack {
	void fetch() {...};
}
Jack::fetch();
```


using 선언과 using 지시자

using 선언
- 선언 영역에 하나의 특별한 이름을 추가
```
using Jill::fetch();
fetch();
```
같은 이름의 또 하나의 지역 변수를 만들지 못하게 한다.


using 지시자
- 한 이름 공간에 있는 모든 이름을 사용

```
#include <iostream>
#include <new>
using namespace std;

namespace jill { double fetch; }
char fetch;

int main()
{
	using namespace jill;	// using 지시자
	double fetch;	// jill::fetch를 가린다.
	cin >> fetch;
	cin >> ::fetch;
	cin >> jill::fetch;
	return 0;
}
```

일반적으로 using 지시자보다 using 선언이 더 안전
- 이름 공간의 이름이 지역 이름과 충돌하면, 컴파일러가 알림.
- using 지시자는 필요하지 않은 이름까지 포함해 모든 이름을 추가됨
	- 이름 공간의 이름이 지역 이름과 충돌하면, 그 이름의 지역버전이 이름 공간 버전의 앞을 가리고,
	- 경고 메시지도 주지 않음!

이름 공간 중첩 가능

이름 공간 대용 이름

```
namespace my_very_favorite_things {};
namespace mvft = my_very_favorite_things;
```

```
#include <iostream>
using namespace std;

namespace my_very_favorite_things {};
namespace mvft = my_very_favorite_things;

namespace myth { namespace elements { namespace fire { double flame = 2.0; } } }
namespace MEF = myth::elements::fire;
using MEF::flame;

int main()
{
	cout << myth::elements::fire::flame << ' ';
	cout << flame;
	return 0;
}
```


이름을 명명하지 않은 이름 공간

```
namespace { int ice; }
```

이름 공간 선언이 들어있지 않은 파일에서 그 이름 공간에 속한 이름들을 사용할 수 없다.
- 정적 변수를 사용하는 데 있어 내부 연결을 가능하게 하는 대안을 제시


이름 공간의 가이드라인
- 외부 전역 변수를 사용하지 말고, 이름이 명명된 이름 공간에 있는 변수를 사용하라.
- 정적 전역 변수를 사용하지 말고, 이름이 명명되지 않은 이름 공간에 있는 변수를 사용하라.
- 함수 또는 클래스 라이브러리를 개발하고 있다면, 그들을 하나의 이름 공간에 넣어라.
	- C++ 표준 라이브러리 함수들 std 이름 공간에 넣은 것
	- math.c 헤더 파일은 이름 공간을 사용하지 않는다.
	- cmath 헤더 파일은 std 이름 공간에 다양한 수학 라이브러리 함수들을 넣는다.
- using 지시자는, 옛날 코드를 이름 공간 용도로 변환하는 임시 수단으로만 사용하라.
- using 지시자를 헤더 파일에 사용하지 마라 ~!~!
	- 그 이유는, 어떤 이름들을 사용할 수 있게 하는지 알 수 없다.
	- 또한 헤더 파일들의 순서가 행동에 영향을 미칠 수 있다.
	- using 지시자를 사용했다면, 그것을 모든 #include 전처리기 지시자 뒤에 놓아라
- 사용 범위 결정 연산자 또는 using 선언을 사용하여 이름을 선택적으로 들여오라.
- using 선언에 대해 전역 범위 대신 선택적으로 지역 범위를 사용하라.



연습 문제

1. 
a. 지역 공간 내 자동 변수
b. 정적 공간. 외부 링크. extern 키워드로 참조 선언
c. 정적 공간. 내부 링크. 정적 변수
d. 지역 정적 변수

2.
using 지시자: 이름 공간 안의 모든 이름을 사용 가능 상태로 만든다.
using 선언: 이름 공간 내 하나의 이름을 사용 가능 상태로 만든다.

3~4 [생략]

5. namespace 안에서 정의한 것 하나, 밖에서 정의한 것 하나

6. 
10
4
0
other(): 10, 1
another(): 10, -4

7. 
1
4, 1, 2
2
2
4, 1, 2
2




연습문제
1. 지역공간 자동변수
	전역공간 외부변수
	정적공간 내부 링크
	지역공간 지역 정적 변수
2. using 선언 : 어떤 이름공간 안의 특정 이름을 사용함. using 선언의 사용 범위 안에서 동일한 이름의 또 하나의 지역변수를 생성할 수 없다.
	using 지시자: 스코프 연산자 없이 한 네임스페이스 안의 모든 식별자에 접근 가능.
3. std::cout, std::cin, std::endl; 등
4. int main() { using std::cout; using std::cin 등 }
5. static 함수로 각자의 파일에 내부링크를 갖도록 함 
	or 명명되지 않은 이름 공간에서 정의
6. 10 4 0    10, 1    10, -4
7. 1   4, 1, 2     2     2    4, 1, 2    2