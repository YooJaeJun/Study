변수 이름 규칙
- 두 개의 밑줄 문자로 시작하는 이름이나, 밑줄 문자와 대문자로 시작하는 이름은, 그것을 사용하는 컴파일러와 리소스가 사용하기로 예약됨
- 하나의 밑줄 문자로 시작하는 이름은, 그것을 사용하는 컴파일러와 리소스가 전역 식별자로 사용하기로 예약됨
- 전역 식별자 global identifier

C++ 바이트
- 컴파일러의 기본 문자 세트를 수용할 수 있는 최소한의 연속된 비트들로 구성됨

<climits>
- 정수형들의 범위 정보, 한계값

'''cpp
#include <iostream>
#include <climits>
using namespace std;

int main()
{
	cout << INT_MAX << ' ' <<
		SHRT_MAX << ' ' <<
		LONG_MAX << ' ' <<
		LLONG_MAX << ' ' <<
		endl;

	cout << sizeof(int) << ' ' <<
		sizeof(short) << ' ' <<
		sizeof(long) << ' ' <<
		sizeof(long long) << ' ' <<
		endl;
}
```

#define 지시자
- 에디터나 워드 프로세서에서 전체 파일을 대상으로 문자열 찾아 바꾸기 기능처럼 동작한다.

전처리
- 독립 토큰(분리된 단어)에만 적용되고 파묻힌 단어들은 건너띈다.

C++ 초기화 문법
- int num(432);
- int num{ 432 };   // [C++11]
- int num = { };    // 0으로 초기화

미확정 undefined 상태
- 변수가 생성되기 바로 직전에 그 메모리 위치에 우연히 남아있던 것이 그 변수의 값으로 행세해버린다.

오버플로, 언더플로
- C++ 표현 한계값을 벗어남
- unsigned(부호 없는) 정수형에서 조심

진수
'''cpp
#include <iostream>
#include <climits>
using namespace std;

int main()
{
	int d10 = 42;
	int d16 = 0x42;
	int d8 = 042;
	cout << d10 << ' ' << d16 << ' ' << d8;		// 42 66 34
}
'''

```cpp
#include <iostream>
#include <climits>
using namespace std;

int main()
{
	int d10 = 42;
	int d16 = 42;
	int d8 = 42;
	
	cout << d10 << endl;
	cout << hex;	// 진법을 바꾸는 조정자
	cout << d16 << endl;
	cout << oct;	// 진법을 바꾸는 조정자
	cout << d8 << endl;
	
	// 42 2a 52
}
```

char
```cpp
char ch = 77;
cout << ch;     // M
```

cout.put()
- 문자를 화면에 출력
```cpp
char ch = 'M';
cout.put(ch);
cout.put('!');
```
- cout의 멤버함수 put()

'.'
- 멤버 연산자 Membership operator

escape sequence
- 생략
- cout << x << endl;    // cout << x << '\n'; 보다 쉬움
- cout << "dr.x. \n:    // cout << "dr.x. " << endl;    보다 쉬움

백스페이스 이스케이프 시퀀스
- \x8, \010, \b
- 기호 이스케이프 시퀀스를 사용하기
- 기호 이스케이프 시퀀스는 모든 코드 체계에서 잘 동작 + 알아보기도 쉬움
```cpp
#include <iostream>
using namespace std;

int main()
{
	cout << "번호입력:_____\b\b\b\b\b";
	long code;
	cin >> code;
	cout << code;

	return 0;
}
```

유니버설 네임 코드
- \u00E2 == '?' 등등
- 유니코드는 수많은 문자와 기호의 표준 코드를 데이터형별로 묶어 제공함으로써
- 다양한 문자 세트를 표시할 수 있도록 해줌
- character에 code point라고 불리는 번호를 대입

wchar_t
- 확장 문자 세트 wide character type
- 한국어, 일본어 등 1바이트로 표현할 수 없는 문자 표현
- cin, cout 은 wchar_t 형을 처리하지 못함
- wcin, wcout 객체 사용
- 문자 앞 'L'
- ex) wchar_t bob = L'P';

[C++11]
char16_t
- u'C' / u"be good"

char32_t
- U'R' / U"dirty"




2. const 제한자

키워드 const
- 제한자(qualifier)
- 선언의 의미를 제한함




3. 부동 소수점수
ex.
34.1245 => 기본값 0.341245, 스케일 100
34124.5 => 기본값 0.341245, 스케일 100000
소수점이 스케일에 따라 자리를 옮기기 때문에 이 데이터형 == 부동 소수점형


float 정밀도 손실 문제
#include <iostream>
int main()
{
	using namespace std;
	float a = 2.34E+22f;
	float b = a + 1.0f;

	cout << "a = " << a << endl;	// a = 2.34e+22
	cout << "b - a = " << b - a << endl;	// b - a = 0
	return 0;
}




4. 산술
'/' 도 자료형마다 연산자 오버로딩 되어있음

{ }를 사용할 경우 초기화 (C++11)
#include <iostream>
int main()
{
	int x = 2;
	char c1{ x };	// const 변수만 허용
}

산술 연산 시, 다음 타입 값은 모두 int형으로 변환
- bool, char, unsigned char, signed char, short
- 이를 정수 승급(integral promotion) 이라고 함

표현범위를 수용할 수 있을 만큼 충분히 큰 첫 번째 데이터형으로 승급
- 한쪽 피연산자 long double => 상대편 피연산자를 long double 형으로 변환
- double, float 도 동일
- 이외 다른 타입은 정수 승급

#include <iostream>
int main()
{
	using namespace std;
	int a, b, c;

	a = 19.99 + 11.99;
	b = (int)19.99 + (int)11.99;
	c = int(19.99) + int(11.99);	// c++
	cout << "a: " << a << endl;
	cout << "b: " << b << endl;
	cout << "c: " << c << endl;

	char ch = 'Z';
	cout << "int(ch): " << int(ch) << endl;
	cout << "static_cast<int>(ch): " << static_cast<int>(ch) << endl;
}
a: 31
b: 30
c: 30
int(ch): 90
static_cast<int>(ch): 90

우수리 버림.



문제
1. 메모리 효율, 저장용량
2. (생략)
3. 안전장치를 제공하지 않는다 !
4. long 형, int형
5. 첫 번째는 ASCII 코드를 사용하는 시스템에서만 A라는 문자 저장
- 두 번째는 어떤 시스템에서도 A라는 문자 저장
6. (생략)
7. 두 데이터형이 얼마나 크냐에 달려 있음
- long형이 4바이트면 데이터 손실 없음
8. (생략)
9. (생략)
10. (d제외 생략)
- d: char32_t

프로그래밍 연습 
(생략)