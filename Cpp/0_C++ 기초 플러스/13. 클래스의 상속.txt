
재활용

클래스 상속(class inheritance)


1. 간단한 기초 클래스로부터 시작하자

public 파생 (public derivation)
- 기초 클래스의 private 부분들도 파생 클래스의 일부가 되나,
- protected 메서드와 public 메서드를 통해서만 접근할 수 있다.


파생 클래스에서 기초 클래스 멤버 미 초기화 시
- 기초 클래스의 디폴트 기초 클래스 생성자 사용

부모 클래스의 생성자는 멤버 초기화 리스트로
- 생략 시 암시적 복사 생성자 사용


파생 클래스와 기초 클래스의 특별한 관계

- 기초 클래스 포인터는 명시적 데이터형 변환 없이도 파생 클래스 객체를 지시할 수 있다.
- 기초 클래스 참조는 명시적 데이터형 변환 없이도 파생 클래스 객체를 참조할 수 있다.

```
Child rplayer1(1140, "Mallory", "Duck", true);
Parent& rt = rplayer1;
Parent* pt = &rplayer1;
rt.Name();
pt->Name();


Parent player("asdf", "zxcv", true);
Child& rr = player;		// 허용 안됨
Child* pr = player;	// 허용 안됨
```

- 파생 클래스 참조는 기초 클래스 객체를 위해 파생 클래스 메서드를 호출하는데,
- 기초 클래스는 파생 클래스의 메서드를 가지고 있지 않기 때문에 문제.

- 기초 클래스 객체를 지시하는 포인터를 형식 매개변수로 사용하는 함수에
- 기초 or 파생 클래스 객체 주소 사용 가능

```
void wohs(const Parent* pt);

Parent player1();
Child rplayer1();
wohs(&player1);		// Parent* 매개변수
wohs(&rplayer1);	// Child* 매개변수
```

- 이와 같은 참조 호환성은 기초 클래스 객체를 파생 클래스 객체로 초기화하는 것도 간접적으로 허용
```
Child olaf1();
Parent olaf2(olaf1);			// Parent(const Child&);	// 존재하지 않음
```

- 이 경우 대신 암시적인 복사 생성자가 그 역할을 대신함

```
Parent(const Parent&);
```

- 기초 클래스형에 대한 참조. 따라서 파생 클래스 형을 참조할 수 있다.

- 같은 논리로, 파생 클래스 객체를 기초 클래스 객체에 대입할 수 있다.
```
Child olaf1();
Parent winner;
winner = olaf1;		// 파생 클래스 객체를 기초 클래스 객체에 대입한다.
```

- 이 경우 다음 암시적인 오버로딩 대입 연산자 사용됨

```
Parent& operator=(const Parent&) const;
```

- 기초 클래스 참조가 파생 클래스 객체를 참조한다.
- olaf1의 기초 클래스 부분이 winner에 복사된다.




2. 상속: is-a 관계

- 기초 클래스를 대상으로 수행할 수 있는 모든 작업을, 파생 클래스 객체에 대해서도 수행할 수 있다.
- is-a-kind-of 관계. 보통 is-a 관계라 함


- has-a 관계 아님. "점심에 과일"
- is-like-a 관계 아님. "변호사는 상어다"
- i-implemented-as-a 관계 아님 "배열 - 스택"
- uses 관계 아님 "컴퓨터 - 프린트"




3. public 다형 상속

다형 (polymorhphic)

virtual 키워드
- 메서드가 객체에 의해 호출되지 않고 참조나 포인터에 의해 호출되었을 때
- 참조나 포인터에 의해 지시되는 객체형에 기초하여 메서드를 선택

예시 [생략]

가상 파괴자
- 파괴자들이 가상이 아니면, 포인터형에 해당하는 파괴자만 호출될 것
- 파괴자들이 올바른 순서로 호출되도록 한다.
- 자식에서 어떤 일을 하는 파괴자를 가질 경우, 
	- 아무 일도 하지 않는 파괴자라 하더라도 부모에 가상 파괴자를 제공해야 함




4. 정적 결합과 동적 결합

함수 호출
- 특정 블록에 있는 함수 코드를 실행한다는 의미는
- "함수 이름을 결합(binding)한다." 라고 한다.
- 컴파일러는 함수 이름, 매개변수 조사
- 컴파일하는 동안 일어나는 결합을 정적 결합(static binding) or 초기 결합(early binding)
- 가상 함수들은 실행 중 사용자가 객체를 결정
- 컴파일러는 프로그램을 실행할 때 올바른 가상 메서드가 선택되도록 해야한다.
- 동적 결합(dynamic binding) or 말기 결합(lately binding)


포인터와 참조형의 호환
- 일반적으로 한 데이터형의 주소를 다른 데이터형의 포인터에 대입하는 것을 허용하지 않는다.
- 참조도 마찬가지
- 그러나 기초 클래스를 지시하는 포인터나 참조는 명시적인 강제 데이터형 변환 없이도 파생 클래스 객체 참조
```
Child c();
Parent* pb = &c;
Parent& rb = &c;
```

업캐스팅 (upcasting)
- 파생 클래스 참조나 포인터를 기초 클래스 참조나 포인터로 변환하는 것
- public 상속에서는 명시적인 데이터형 변환이 없어도 업캐스팅이 언제든지 허용된다.
- 객체를 지시하는 포인터를 함수의 매개변수로 전달할 때에도 같은 논리 적용. 업캐스팅은 전이된다.
	- 파생 클래스로부터 또 다른 클래스를 파생시키면, 
	- 기초 클래스의 포인터는 기초 클래스 객체, 파생 클래스 객체, 또 다른 파생 클래스 객체를 모두 참조할 수 있다.

다운캐스팅 (downcasting)
- 기초 클래스 포인터나 참조를 파생 클래스 포인터나 참조로 변환하는 것
- 명시적인 데이터형 변환 없이 허용되지 않는다.
- 파생 클래스를 지시하는 포인터를 기초 클래스의 주소로 설정하고, 그 포인터를 사용하여 파생 클래스의 멤버함수를 호출하는 사고 발생


가상 멤버 함수와 동적 결합

```
Derived d;
Base* bp;
bp = &d;
bp->ViewAct();	// 어떤 버전 호출?
```

- 가상으로 선언하지 않으면 Base::ViewAct(); 호출. 정적 결합.
- 가상 함수 그 반대. 동적 결합.


왜 정적 결합이 디폴트?
- 포인터나 참조 객체 종류 추적 처리 부담
- 메서드를 다시 정의하지 않으면, 필요 없음


가상 함수 테이블
- 컴파일러가 각각의 객체에 숨겨진 멤버를 하나씩 추가
- 숨겨진 멤버는 함수의 주소들로 이루어진 배열을 지시하는 포인터를 저장
- 그 배열을 가상 함수 테이블 (virtual function table; vtbl)
- 가상 함수들의 주소 저장
- 파생 클래스가 가상 함수를 다시 정의하지 않으면, vtbl은 그 함수의 오리지널 버전의 주소 저장


생성자
- 생성자는 가상으로 사용할 수 없다.
- 파생 클래스 객체의 생성은, 기초 클래스 생성자가 아니라 파생 클래스 생성자를 호출한다.
	- 그러고 나서 파생 클래스 생성자가 기초 클래스 생성자를 사용한다.
- 그래서, 파생 클래스는 기초 클래스 생성자를 상속하지 않는다.


파괴자
- 클래스가 기초 클래스로 사용된다면, 파괴자는 가상으로 선언해야 한다.
- 예시 - Derived 클래스에서 char* 멤버 추가

```
Base* pe = new Derived;
delete pe;
```

- 디폴트 정적 결합 적용 시 ~Base() 파괴자 호출
- Base 성분들이 지시하는 메모리만 해제됨
- 그러므로 가상으로 선언하면 ~Derived() 파괴자 호출. 그 다음 ~Base() 호출

- 일반적으로, 파괴자가 필요 없는 기초 클래스라 하더라도 가상 파괴자를 제공해야 한다.


프렌드
- 프렌드는 가상 함수가 될 수 없다.
- 프렌드 함수가 내부적으로 가상 멤버 함수를 사용하게 할 순 있다.


가상 함수를 다시 정의하지 않으면
- 파생 클래스가 길게 이어진 파생 사슬의 일부라면,
	- 함수의 가상 최근에 정의된 버전 사용


가상 함수를 다시 정의하면 메서드가 은닉된다.

```
class Base
{
public:
	virtual void show(int a) const;
}
class Derived : public Base
{
public:
	virtual void show() const;
}

Base b;
b.show();	// 맞다
b.show();	// 틀리다
```

- 재정의는 int형 매개변수를 사용하는 기초 클래스 버전을 가린다.
- 즉, 상속된 메서드를 다시 정의하는 것은 오버로딩의 변종이 아니다.
- 재정의는 동일한 함수 시그내처를 가지고 있는 기초 클래스 선언만 가리는 것이 아니라, 
	- 매개변수 시그내처와는 상관 없이 같은 이름을 가진 모든 기초 클래스 메서드들을 가린다!!!


규칙
1. 상속된 메서드를 재정의할 경우, 오리지널 원형과 정확히 일치시킬 필요가 있다.
	- 예외: 리턴형이 기초 클래스에 대한 참조나 포인터인 경우, 파생 클래스에 대한 참조나 포인터로 대체될 순 있다.
	- 리턴형이 클래스형과 병행하여 바뀌는 것을 허용하기 때문에, 이 기능을
	- 리턴형의 공변(covariance)이라 한다.

```
class Base
{
public:
	virtual Base& build(int n);
}

class Derived : public Base
{
public:
	// 공변 리턴형을 가지는 파생 메서드
	virtual Derived& build(int n);			// 동일한 함수 시그내처
}
```

	- 이 예외는 매개변수가 아니라 리턴값에만 적용된다.

2. 기초 클래스 선언이 오버로딩되어 있다면, 파생 클래스에서 모든 기초 클래스 버전들을 재정의해야 한다.

```
class Base
{
public:
	virtual void A(int a) const;
	virtual void A(double x) const;
	virtual void A() const;
}
class Derived : public Base
{
public:
	virtual void A(int a) const;
	virtual void A(double x) const;
	virtual void A() const;
}
```

	- 한 가지 버전만 재정의하면, 나머지 두 버전은 가려져 파생 클래스 객체가 그들을 사용할 수 없게 된다.




5. 접근 제어: protected

- 가능하다면 protected 접근 제어보다 private 접근 제어 사용
- 기초 클래스 데이터에 접근하게 하려면 기초 클래스 메서드 사용




6. 추상화 기초 클래스 (abstract base class; ABC)

is-a 규칙 적용 어려움
ex.
- 원과 타원 그리는 프로그램
- 원은 타원의 특별한 경우로서, 장경과 단경의 길이가 같은 타원
- 모든 원은 타원.
- 그럼 Ellipse 클래스부터 Circle 클래스 파생?
- 멤버: 타원 중심, 반장경(긴 지름의 반), 반단경(짧은 지름의 반), 방위각, 
	타원 이동, 면적 구하기, 회전, 장경 크기 조절

```
class Ellipse
{
private:
	double x, y, a, b, angle;	// a 반장경, b 반단경
public:
	void Move(int nx, int ny) { x = nx; y = ny; }
	virtual double Area() const { return 3.14159 * a * b; }
	virtual void Rotate(double nang) { angle += nang; }
	virtual void Scale(double sa, double sb) { a *= sa; b *= sb; }
}

class Circle : public Ellipse
{
private:
	// 반장경, 반단경 필요 없는데....
	double x, y, r;
public:
	void Move(int nx, int ny) { x = nx; y = ny; }
	double Area() const { return 3.14159 * r * r; }
	void Scale(double sr) { r *= sr; }
}
```

- 공통적인 것 추출해 추상화 기초 클래스에 넣기

```
class BaseEllipse
{
private:
	double x, y;
public:
	BaseEllipse(double x0 = 0, double y0 = 0) : x(x0), y(y0) {}
	virtual ~BaseEllipse() {}
	void Move(int nx, int ny) { x = nx; y = ny; }
	virtual double Area() const = 0;
}
```

- 클래스 선언에 순수 가상 함수가 들어 있으면, 그 클래스의 객체를 생성할 수 없다.
- 어떤 클래스가 추상화 기초 클래스가 되려면, 적어도 하나의 순수 가상 함수를 가져야 한다.
	= 0
- Circle이나 Ellipse 같은 클래스를 구체화 클래스(concrete class) 라고 한다.

예시 [생략]

- 구체화 클래스들은 기초 클래스 역할 하지 말기
- 추상화 기초 클래스의 사용은, 컴포넌트 설계자가 "인터페이스 약정"을 만드는 것을 허용한다.
- 이 인터페이스 약정은 ABC로부터 파생되는 모든 컴포넌트들이 최소한 ABC가 규정하는 공통 기능을 지원함을 보장




7. 상속과 동적 메모리 대입

상속은 동적 메모리 대입(new delete)과 어떻게 관계를 맺을까?

파생 클래스에서 new 하지 않을 경우
- 디폴트 파괴자만 있어도 충분
- 대입도 동일

파생 클래스가 new를 사용할 경우
- 멤버 초기자 리스트

```
Derived::Derived(const Derived& hs)
	: Base(hs)
{}
```

- 기초 클래스 객체를 위한 대입

```
Derived& Derived::operator=(const Derived& hs)
{
	if (this == &hs) return *this;
	Base::operator=(hs);		// 기초 클래스 부분을 복사	// *this = hs;
	delete [] style;
	style = new char[std::strlen(hs.style) + 1];
	std::strcpy(style, hs.style);
	return *this;
}
```

- 기초 클래스와 파생 클래스가 둘 다 동적 메모리 대입, 파생 클래스 파괴자, 복사 생성자, 대입 연산자를 사용할 때,
	- 이들은 모두 기초 클래스 성분을 처리하기 위해 그들의 기초 클래스 대응물을 사용해야 한다.
	1. 파괴자 - 자동적
	2. 생성자 - 멤버 초기자 리스트에서 기초 클래스 복사 생성자 호출 or 디폴트 생성자 자동 호출
	3. 대입 연산자 - 기초 클래스 대입 연산자의 명시적 호출에서 사용 범위 결정 연산자를 사용


동적 메모리 대입과 프렌드

- 프렌드는 멤버 함수가 아니기 때문에 사용 범위 결정 연산자를 사용할 수 없는 문제가 있다.
- 상속 관계의 다른 클래스를 알 도리가 없다.

해결책: 강제 데이터형 변환

```
std::ostream& operator<<(std::ostream& os, const hasDMA& hs)
{
	// operator<<(ostream&, const  baseDMA&) 를 위해 강제 데이터형 변환
	os << (const baseDMA&) hs;
	os << "스타일: " << hs.style << std::endl;
	return os;
}
```




8. 클래스 설계 복습

컴파일러가 자동 생성하는 멤버 함수들
- 디폴트 생성자 없으면 -> 디폴트 생성자
- 복사 생성자
	- 생성 조건
		- 새 객체를 동일한 클래스의 다른 객체로 초기화할 때
		- 객체가 함수에 값으로 전달될 때
		- 함수가 객체를 값으로 리턴할 때
		- 컴파일러가 임시 객체를 생성할 때
	- 멤버별 초기화를 수행하는데, 멤버가 클래스 객체면 해당 클래스에 정의된 복사 생성자 사용됨
	- new 초기화 멤버 포인터들은 깊은 복사 필요

- 대입 연산자
	- 이후 18장 move 설명

explicit 암시적 변환 x

참조 전달, 참조 리턴

허용되는 캐스팅
```
Base b;
Derived d;

Base* pb = &d;			// 허용되는 암시적 업캐스팅
Derived* pd = (Base*)&b;	// 허용되는 명시적 다운캐스팅

pb->show_name();		// 부모의 메서드. 안전한 업캐스팅
pd->range();			// 자식의 메서드. 불안한 다운캐스팅
```

파생 클래스 객체를 기초 클래스 객체에 대입할 수 있으나, 기초 클래스 멤버들만 대입이 이루어진다.

변환 생성자는 기초 클래스 매개변수뿐만 아니라 부가적인 매개변수들도 사용하는 생성자
```
Derived(const Base& ba, double ml = 500, double r = 0.1);
```

기초 클래스를 파생 클래스 객체에 대입할 수 있는가?
	1. 기초 클래스 객체를 파생 객체로 변환하는 것을 정의한 생성자를 가지고 있고,
	2. 기초 클래스 객체를 파생 클래스 객체에 대입하는 대입 연산자를 정의하고 있으면, 대입 가능
	3. 위 두 가지 중 하나라도 만족하지 못하면, 명시적 데이터형 캐스트를 사용해야 함

```
void show(const Base& rba)
{
	rba.ViewAct();
	cout << endl;
}
void inadequate(Base ba)
{
	ba.ViewAct();
	cout << endl;
}

Derived buzz();
show(buzz);		// Derived 버전으로 해석
inadequate(buzz);	// Base 버전으로 해석
```


파생 클래스의 프렌드를 기초 클래스의 프렌드로 사용하기를 원할 때

```
ostream& operator<<(ostream& os, const Derived& hs)
{
	os << (const Base&) hs;
	os << "스타일:  << hs.style << endl;
	return os;
}

// or

os << dynamic_cast<const Base&>(hs);
```

dynamic_cast 가 데이터형 캐스트의 가장 바람직한 형태 (15장)



요약
- public 상속은 is-a 관계
- 추상화 기초 클래스
- 순수 가상 메서드들은 파생 클래스들이 공통으로 사용하는 인터페이스



연습 문제
1. 멤버변수, 멤버함수

2. 생성자, 파괴자, 대입 연산자, 프렌드 !!!

3. 
- 대입에 대입(연쇄대입)이 불가능  a = b = c;
- 메모리와 시간이 낭비

4. 기초 클래스 생성자 - 파생 클래스 생성자 - 파생 클래스 파괴자 - 기초 클래스 파괴자

5. 그렇다. 생성자를 상속받을 수 없다.

6. 파생 클래스 메서드.
기초 클래스 정의를 무시함

7. 
- 파생 클래스 생성자가 new나 new[] 연산자를 사용해 멤버인 포인터를 초기화한다면,
	- 파생 클래스는 대입 연산자를 정의해야 한다.
- 디폴트 대입이 파생 클래스 멤버들에 적합하지 않으면, 파생 클래스는 대입 연산자를 정의해야 한다.

8. // 4번이랑 완전 똑같잖아. 문제 번역 잘못됨.

9. 
- 예
- 상황이나 조건에 따라 다르다. 강제적 타입 캐스팅 매개변수로 기초 클래스 객체를 받는 변환 연산자, 혹은 대입 연산자 추가 정의할 때만 가능.

10. 암시적 디폴트 복사 생성자
기초 클래스에 대한 참조가, 그 기초 클래스로부터 파생된 모든 파생 클래스를 참조할 수 있기 때문이다.

11. 부모는 자식을 가리킬 수 있다. 부모 클래스 객체에 파생 클래스 객체가 복사되는 업캐스팅이 일어난다.

- 객체를 값으로 전달하면 복사 생성자 호출
- 형식 매개변수가 기초 클래스 객체이므로, 기초 클래스 복사 생성자 호출
- 이 복사 생성자는 기초 클래스에 대한 참조를 매개변수로 사용하는데,
- 그 참조가 매개변수로 전달된 파생 객체를 참조할 수 있다.


12. 메모리와 시간 절약
+ 가상 함수 사용 가능

13. 
a. 기초 클래스 메서드 호출
b. 파생 클래스 메서드 호출

14. 
- 파생 클래스 생성자에서 기초 클래스의 private으로 선언된 kit_sq_ft 멤버에 접근할 수 없다.
	// 답지에 이거 없는데 이거도 추가 필요
- 상황이 is-a 모델에 맞지 않다. public 상속 부적절.
- House()에 있는 area()의 정의가 Kitchen에 있는 area()를 보이지 않게 가린다. 서로 다른 시그내처 사용하기 때문.




연습문제

1. public, protected 멤버변수와 메서드
2. 생성자, 파괴자, 복사 대입 연산자, 프렌드 등
3. 객체 = 객체 = 객체 와 같이 연속적인 대입 불가능
	복사 생성자가 암시적으로 호출되어 비용이 나며, 더 느리다.
4. 기본생성 - 파생생성
	파생파괴 - 기본파괴
5. (필요하다. 모든 클래스는 자신만의 생성자를 요구 빈 몸체일지라도 생성자가 반드시 필요!!!)***
6. 파생. 기초 클래스 정의를 무시
	파생 클래스에서 재정의하지 않는 함수만 기초 클래스 메서드 호출
7. new나 new[] 사용해 클래스의 멤버인 포인터를 초기화할 때
	디폴트 대입이 파생 클래스 멤버들에 적합하지 않을 때
8. 4와 동일 (문제 오타)
	파생 클래스 객체의 주소를 기초 클래스 포인터에 대입할 수 있다.
	명시적인 타입캐스팅에 의해서만 기초 클래스 객체의 주소를 파생 클래스 포인터에 대입할 수 있다(다운캐스팅).
9. 가능. 각 멤버들 암시적 대입.
	대입 연산자가 정의되어 있을 경우 가능 
	(변환 연산자를 정의하고 있거나, 기초 클래스 매개변수를 사용하는 대입 연산자를 정의할 경우 가능)
10. 부모 클래스 객체의 참조는 자식 클래스 객체를 받을 수 있다.
	자식 객체 중 부모 객체의 멤버들을 각 멤버 간 대입할 수 있기 때문이다.
11. 값으로 객체 전달 시, 복사 생성자 호출.
12. 더 적은 메모리의 데이터를 대입하여 시간적으로 유리 / 복사 생성자가 암시적으로 호출되지 않아도 됨
13. a. 기초 클래스 함수 호출 / b. 파생
14. (is-a 모델에 맞지 않다. public 상속 부적절)
	파생 클래스 메서드에서 부모 클래스의 private 변수를 불러올 수 없음
	area 함수 가상 함수로 선언되어 있지 않음 / 매개변수가 다름