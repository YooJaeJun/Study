
의식의 흐름대로 회고

## 최초 동기

- 처음엔 게임을 보고 시작한 게 아니라, 랜덤 맵 생성 기능과 여러 탄막을 구현하고 싶은데 그에 적합한 게임을 찾아 시작.
- 엔터 더 건전을 기반으로 했지만 나만의 기능을 넣고 싶었다.

<br>

## 랜덤 맵 생성

- 목표: 다이나믹한 배치의 맵. 방 정렬도 안 되어 있고, 복도는 대각선으로 뻗어있는... 동굴같은 지형이지만 방끼리는 명확히 분리된 지형을 원했다. 

- 시작: 
    - 실제 엔터 더 건전이란 게임에는 BSP 방법이 더 알맞아 보였지만, 내가 원한 바 보다는 좀 더 정적인 맵인 것 같았다.
    - Tiny Keep이란 게임의 개발자의 DevLog를 보고 들로네 삼각분할과 최소 스패닝 트리를 이용한 '절차적 맵 생성' 이란 방법을 찾았다.
    - 유튜브 sleeptype 님의 포트폴리오를 보고 가능성을 보고 시작했다.

- 알고리즘 구현
    - 들로네 삼각분할
        - 들로네 삼각분할은 외부 깃허브 소스를 찾아 참고했다.
        - 이 과정에서 소스의 삼각형, 선 클래스, Utility 함수 등이 내 프레임워크와 달라 기존 코드 개조가 필요했다.
        - 기존 GameObject를 상속받는 노드, 선, 삼각형 클래스를 만들고 들로네 삼각분할에 이 코드를 사용했다.
    - 최소 스패닝 트리
        - 최소 스패닝 트리는 직접 구현했는데, 이는 노드 기반 구현이었다.
        - map으로 노드와 연결된 노드를 구했다.
        - 방을 찾으면 방의 중점이 노드이기 때문에, 방을 알면 노드를 쉽게 알지만, 노드를 알았을 때 방을 찾을 수 없었기 때문에 관련 map을 만들었다.
    - 시각화
        - 시각화를 위해 생각보다 많은 구현 시간을 소모했다. ex. 노드끼리 연결된 선들
    - 복도 A*
        - 여기부턴 기존 자료들은 내가 원하는 게임과 맞지 않았다.
        - 기존 자료들은 방과 방 사이가 명확히 구분되지 않은 방식들이었다.
        - 복도를 최단거리로 잇고 싶은 점을 모티브로 마침 학원에서 A* 알고리즘을 배우고 있을 때라, 복도와 문 설치를 A*로 구현해보았다.
        - 이때 포폴 작업에서 가장 많은 시간을 소모했다...
        - 영상처럼 3가지의 문제가 발생했고, 최대한 예외처리 없이 로직으로 승부를 보려했다.
        - 하지만 예외처리가 들어갔고, 코드의 가독성이 그리 좋진 않았다. 
        - 또한 몇 가지 버그가 있었다. 복도 중간 다른 방이 있는데 그게 하필 문이었을 경우, 문을 하나 더 생성하는 버그 등
        - 몇 번의 작은 문제들을 거쳐 수정해 2번의 A*로 목표 방을 최단거리로 찾아가는 방식을 구현했다.
    - 히스토그램 스택
        - 방 안에 범위가 있는 구덩이, 벽을 설치하기엔 중간중간 장식과 스폰타일이 많았다.
        - 중복을 없애면서 남는 공간이 거의 없이 오밀조밀하게 배치하고 싶었다.
        - 그런데 Brute Force로 방을 조사하면 최대 O(n^4), 개선해도 O(n^3) 방법 밖에 떠오르지 않았다.
        - 그때 유튜브 G-Physics 님의 유튜브를 봤었던 기억이 있어 Maximal Square 알고리즘의 Better Dynamic Programming 방법으로 하려했다.
        - 그러나 정사각형 범위가 구해져서, 직사각형 범위를 구하려면 별도로 랜덤 범위를 또 설정해야 했다.
        - 또한 최대한의 남는 공간이 없이 배치한다는 목표에도 부합하지 않았다.
        - 그때 정말 우연히 리트코드에서 85. Maximal Rectangle 문제를 봤다.
        - 백준 플레 문제 중 히스토리그램 문제를 풀던 것이 생각났다. 이를 이용해 stack으로 구현했다.
        - 범위가 이상하게 잡혀 문제가 계속 발생했지만, 원인을 뒤늦게 찾고 범위를 수정했다.
        - 남는 공간이 거의 없으면서 기존 장식, 스폰 타일을 침범하지 않는 배치를 완성했다.
    - 소감
        - 내가 시작할 때 얼마나 짧게 생각하는지 알 수 있었다!!
        - 하지만 여러 알고리즘을 나만의 방식으로 활용해 게임에 적용할 수 있었다!!
        - 기존 자료들을 보고 내 것으로 소화할 수 있다는 자신감을 얻었다.
        - 한참 나중에 게임 실무에서 사용했던 알고리즘을 책으로 쓰고 싶다는 꿈이 생겼다.
        - 영감을 얻은 Tiny Keep 개발자, 유튜브 sleeptype 님, 유튜브 G-Physics 님께 감사드립니다.

<br>

## 탄막 알고리즘

- 목표
    - 학원 기초/일반반 강사님한테 행렬과 벡터를 배우며 게임 내 모든 움직임의 원리를 깨달았다.
    - 행렬 벡터 개념을 게임에 활용할 방법이 무궁무진하게 떠올랐다.
    - 그중 지금까지 봐았거나 새로 생각한 탄막 패턴들을 구현해보고 싶었다.
    - 예전에 봤던 책 중 '게임 매니악스 탄막 게임 알고리즘'도 있었다.
- 1 String 탄
    - 아주 아주 오래 전에 한 달동안 프로그래밍을 접하고 포기한 적이 있었다.
    - 그때 학원을 다녔었는데, 그때 선생님이 유니티로 문자열을 출력하는 탄환을 구현해보라고 했었다.
    - 이 경험을 바탕으로 한 층 발전된 문자열 탄환을 DirectX 11로 구현해보았다.
    - 일정 간격까지 가면 글자처럼 보이는 탄막을 형성.
    - 영상에서도 언급했듯 5x5 배열이라 생각하고 시작했다.
    - 다만 문자"열"이기 때문에 각 문자열은 같은 행을 지닌다고 생각.
    - scalar는 행 index에 비례하고, angle은 열 index에 비례한다.
    - 핵심은 플레이어 타겟팅이다. 문자 개수에 상관없이 플레이어가 문자열의 중앙에 오는 것이 목표.
    - 문자의 개수, 각도, 매직넘버 3가지를 가지고 이동방향 식을 세웠다.
    - ImGui로 실시간으로 문자열을 변경할 수 있는 기능을 넣었다.
- 2 Z탄
    - 엔터 더 건전 몹 패턴을 보고 구현.
    - Z Circle 탄. 이때부터 상태 패턴을 적극 활용했다.
- 3 미로탄
    - "게임 매니악스 탄막 게임 알고리즘"을 보고 영감을 얻어 구현
    - 문자열, Z탄과 비슷하게 String 배열 기반
- 4 무한 소용돌이
    - 창작탄
    - 공전 rotation을 계속 더하면서 공전
    - 시간이 지나면 모든 bullet의 공전 rotation 수치가 최소 공배수를 이루므로 점이 5개, 4개,... 1개로 모인다.
    - [최초 영상](https://www.youtube.com/watch?v=96I5VHXlo0I)
- 5 수리검탄
    - 창작탄
    - 연출을 처음엔 의도하지 않았지만 하다보니 개발한 탄
    - 부드럽게 꺾이는 부분을 좀 연구했다.
- 6 통통 미사일
    - 창작탄
    - 배운 Trail 기능, 알카노이드 및 에어하키 기능을 활용한 탄.
- 7 Brute Force 탄
    - 엔터 더 건전 보스 패턴을 보고 구현.
    - 교차 각도로 전 범위 발사
- 8 원형탄
- 9 줄넘기탄
- 10 권총, 샷건, 기관총
    - 반동 느낌을 위해 각도를 랜덤으로 조금씩 틀어서 발사
- 11 기타
    - 탄이 뭉치면서 발사되는 몽글몽글탄 같은 것도 있었으나 넣진 않았다.
    - 동방 프로젝트 등 기존 화려한 탄막을 구현하고 싶었는데 아쉽다.

<br>

## 게임 플레이
- 기타
    - 배운 개념들을 활용해 영상에 모두 서술
    - ex. 시간에 따라 가속, 감속에 쓰이는 cos 활용 등
    - Scene의 상태 프로세스: 1 방 탐색 / 2 문, 스폰이펙트 생성 / 3 적 스폰 / 4 전투 / 5 방 클리어됨
- 시네마틱 연출
    - 상태 패턴의 활용 절정으로 시네마틱 연출을 만들어보았다.
    - 생각보다 더 디테일해야 되고 단계가 더 세분화 되어있구나 느꼈다.
    - 플레이어, 보스, 게임상태를 모두 변경해야 하기 때문에 예외처리를 발생할 요소가 많았다.
    - 최대한 각 클래스 멤버를 변경하는 일은 각 클래스의 함수에서 발생하도록 함
    - 3D 연출을 더 배우면서 개정하고 싶음
- 보스 패턴
    - 보스 패턴이 정말 아쉽다. 여유가 부족해 단순 패턴으로 구현했다.
    - 원래 생각했던 건 2페이즈로 나뉘고, 2페이즈 시작 연출도 있어야 했다.
    - 페이즈 별 패턴, 난이도가 구분되어야 했다.


