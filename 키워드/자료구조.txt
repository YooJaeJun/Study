배열
	연속적인 공간을 저장하기 위한 구조

array
TArray<>
	언리얼 문서 참고


힙
	완전 이진 트리
	부모는 자식보다 값이 적음(최소힙 기준)

TMap
TSet
	균형 이진 트리
	키값
	탐색 시간 log n
	
LinkedList
TLinkedList, TList

	게임에서 vector, linked list
		건물 등 고정적인 건  vector
		캐릭터 등 중간 삽입, 삭제 linked list

	circular linked list
		시작 편하게 가기 위함

	double linked list
		앞뒤로 오고가는 경우
		게임 UI
			스크롤 시 순환 아이템 리스트
		삽입, 삭제 코드로 쓰기
		STL 리스트는 더블

	single linked list
		언리얼도 single로 씀

스택
	데이터 뒤집을 때
	호출 역순 반환
	가장 최근 선언, 가장 최근 반환
	길찾기 - 도착 지점부터 시작 지점 보여주고 싶을 때
	재귀
		깊이 우선 탐색, 백트래킹
	top -1이 초기 상태 !!
	삽입
		올리고, 넣는다.
		그래야 꽉찼는지 확인
	삭제
		지우고, 내린다.
	윈도우 계산기
	후위 표기법
		전 중 후위

큐
	circular queue
		데이터가 쌓이는 상황, 시작과 끝을 알아야 되는 상황
		메시지
		파티클 (dx 강의 참고)
	너비 우선 탐색 
	명령큐
		순환큐
		중앙집중큐 - 너 맞았어 너 죽었어
		개인별 큐 - 중앙집중큐 보고 어 나 피격됐네 하고 피격 처리
			각각 스레드 구성
	순환큐
		하나를 비운다.
			꽉 차 있는 것과 비워있는 것 구분
			front 와 rear가 같을 땐, 비워져 있음
			front가 rear보다 1 크면, 꽉 차 있음
	링크드 리스트 큐 기반
		순환 큐 사용할 필요 없음
		사용 잘 안 함
			큐 크기가 고정, 할당 삭제가 빈번하게 일어나지 않는다. 
			메모리 단편화가 우려된다.

----------여기까지 선형 자료구조----------
	배치하는 구조가 연속적임 (메모리가 연속적인 게 아님)


비선형 자료구조
	트리, 그래프

트리
	계층구조로 연산할 필요
	본 구조
	일반형 트리 - 노드의 개수 제한 없는 트리
		비헤이비어 트리
	루트 - 브랜치 - 리프

시간복잡도
	기수 정렬 - 메모리로 시간을 산다.
		
이진 트리
	검색 log n


------------------------------------------------------------


트리
	이진트리
		완전, 포화 등 용어들
		LeftChild / RightSibling
유니온 파인드

쿼드 트리
	쿼드 트리 + 프러스텀 컬링 - 충돌 영역 체크

전위, 중위, 후위 순회

이진 탐색 트리
	배열이 아니라 트리인 이유: 배열 비해 삽입 삭제가 빠름
	부모 왼쪽 자식보다 크고 오른쪽 자식보다 작음
	삭제 헷갈림...

AVL 트리
	좌우의 깊이 차 최대 1까지만 허용
	삽입 삭제가 빠른 대신, 탐색 속도는 RB 트리보다 상대적으로 느리다.

Red-Black 트리
	여러 규칙으로 트리 유지
	탐색 속도는 AVL 트리보다 빠르다.

Set이 균형 이진 트리로 이루어짐
	예전엔 RB 트리. 상황에 따라 달라진다고 하는데....

Set
	키 자체를 데이터로 사용

Map
	


------------------------------------------------------------


힙
우선순위 큐
	링크드 리스트 사용 안 함.  탐색 시간복잡도 n임
	사용처 - 명령 큐
	힙 순서 속성을 만족하는 완전 이진 트리
		오름차순 기준 부모 노드는 자식보다 작다
	삽입 - 아래에서 위로
	삭제 - 맨 뒤 거를 루트에 채워놓고 위에서 아래로
	자료구조 - 배열 사용 - 레벨을 알 수 있어서
	특징 - 정렬이 가능 / 삽입삭제 log n
	배열로 구현 시 가변 크기 어려움

그래프
	목적 - 경로설정
	용도 - FSM 방향성 그래프
	자료구조 - 리스트
		인전행렬 - 가변이 안됨

BFS / DFS

위상정렬
	한 정점이 다른 정점과의 관계 속 가지는 위치
	DAG - 다이렉티드 언사이클릭 그래프 == 노사이클
		한 방향
	용도 - 게임에선 없음

MST
	최소 비용 트리
	용도 - 경로를 분할해서 보여줄 때, SRPG 길찾기 최소값 보여줄 때

	프림
		우선순위 큐
	크루스칼
		합집합
			용도 - 기간한정 할인될 아이템들 묶기

힙
우선순위 큐
	링크드 리스트 사용 안 함.  탐색 시간복잡도 n임
	사용처 - 명령 큐
	힙 순서 속성을 만족하는 완전 이진 트리
		오름차순 기준 부모 노드는 자식보다 작다
	삽입 - 아래에서 위로
	삭제 - 맨 뒤 거를 루트에 채워놓고 위에서 아래로
	자료구조 - 배열 사용 - 레벨을 알 수 있어서
	특징 - 정렬이 가능 / 삽입삭제 log n
	배열로 구현 시 가변 크기 어려움

그래프
	목적 - 경로설정
	용도 - FSM 방향성 그래프
	자료구조 - 리스트
		인전행렬 - 가변이 안됨

BFS / DFS

위상정렬
	한 정점이 다른 정점과의 관계 속 가지는 위치
	DAG - 다이렉티드 언사이클릭 그래프 == 노사이클
		한 방향
	용도 - 게임에선 없음

MST
	최소 비용 트리
	용도 - 경로를 분할해서 보여줄 때, SRPG 길찾기 최소값 보여줄 때

	프림
		우선순위 큐
	크루스칼
		합집합
			용도 - 기간한정 할인될 아이템들 묶기

힙
우선순위 큐
	링크드 리스트 사용 안 함.  탐색 시간복잡도 n임
	사용처 - 명령 큐
	힙 순서 속성을 만족하는 완전 이진 트리
		오름차순 기준 부모 노드는 자식보다 작다
	삽입 - 아래에서 위로
	삭제 - 맨 뒤 거를 루트에 채워놓고 위에서 아래로
	자료구조 - 배열 사용 - 레벨을 알 수 있어서
	특징 - 정렬이 가능 / 삽입삭제 log n
	배열로 구현 시 가변 크기 어려움

그래프
	목적 - 경로설정
	용도 - FSM 방향성 그래프
	자료구조 - 리스트
		인전행렬 - 가변이 안됨

BFS / DFS

위상정렬
	한 정점이 다른 정점과의 관계 속 가지는 위치
	DAG - 다이렉티드 언사이클릭 그래프 == 노사이클
		한 방향
	용도 - 게임에선 없음

MST
	최소 비용 트리
	용도 - 경로를 분할해서 보여줄 때, SRPG 길찾기 최소값 보여줄 때

	프림
		우선순위 큐
	크루스칼
		합집합
			용도 - 기간한정 할인될 아이템들 묶기


------------------------------------------------------------



MST
	크루스칼
	솔린 보르부카

길찾기
	각 특징
	플로이드 워셜 - n^3
	네비 전까진 타일 기반

해싱
	값 -> 해싱 -> 값
	값 변경 불가 (256비트부터)
	용도 - 에셋 탐색
	언리얼 해시 코드
		에셋 현지화 - ID (UUID)
	unordered_map

정렬
	병합정렬
		물리적 상황에서 퀵 정렬보다 빠름. 하드 디스크같은 공간에 접근 속도가 느리기 때문.

	힙정렬
		O(nlogn)
	기수정렬 == Radix 정렬 == 버킷 정렬
		O(kn)
		1의 자리부터 해시맵에 넣기, ... 10의 자리, ...


MST
	크루스칼
	솔린 보르부카

길찾기
	각 특징
	플로이드 워셜 - n^3
	네비 전까진 타일 기반

해싱
	값 -> 해싱 -> 값
	값 변경 불가 (256비트부터)
	용도 - 에셋 탐색
	언리얼 해시 코드
		에셋 현지화 - ID (UUID)
	unordered_map

정렬
	병합정렬
		물리적 상황에서 퀵 정렬보다 빠름. 하드 디스크같은 공간에 접근 속도가 느리기 때문.

	힙정렬
		O(nlogn)
	기수정렬 == Radix 정렬 == 버킷 정렬
		O(kn)
		1의 자리부터 해시맵에 넣기, ... 10의 자리, ...


------------------------------------------------------------


알고리즘

풀이 생각 순서

그리디 
	먼저 되는지 판단
	부분 최적해 총합이 전체 최적해의 총합이 될 때
	크루스칼, 다익스트라, A*
분할정복
	한 부분이 다른 부분에 영향을 미치지 않는다.
	피보나치 짝수-홀수 제곱 행렬
동적 계획
	한 부분 계산해야 다른 부분 계산 가능
	피보나치
백트래킹
	깊이 우선 탐색

허프만 코딩 
	mp3, mp4, jpg 등 압축 시 사용
	손실 압축 알고리즘



