
0. 개요


1. 그래프 기초
    v, e
    가중치 그래프 == 네트워크

    부분 그래프 (sub graph)
        노드 집합 V의 부분 집합(subset)과, 에지 집합 E의 부분 집합으로 이루어진 그래프
    
    완전 그래프 (complete graph)
        모든 노드들이 서로 하나의 에지로 연결되어 있는 그래프
    
    진입 차수, 진출 차수

    연결 그래프


2. 그래프 구현
    인접 행렬 (adjacency matrix)
    인접 리스트

    1. 인접 행렬을 이용한 구현

        ```
            #include <iostream>
            using namespace std;

            enum class GraphType
            {
                directed,
                undirected
            };
            const int maxSize = 6;

            template <typename T>
            class Graph
            {
            private:
                GraphType mode;
                T adjMatrix[maxSize][maxSize];
                bool nodeList[maxSize];
                int nodeSize;

            public:
                Graph() = default;

                Graph(const GraphType mode)
                    : mode(mode), nodeSize(0)
                {
                    int r, c;
                    for (int r = 0; r < maxSize; r++)
                    {
                        nodeList[r] = false;
                        for (int c = 0; c < maxSize; c++)
                        {
                            adjMatrix[r][c] = false;
                        }
                    }
                }

                bool CheckNode(int node)
                {
                    if (node >= maxSize)
                    {
                        cout << "Error: node no out of range.\n";
                        return false;
                    }
                    return true;
                }

                void insertNode(int node)
                {
                    if (!CheckNode(node)) return;
                    nodeList[node] = true;
                    nodeSize++;
                }

                void deleteNode(int node)
                {
                    if (!CheckNode(node)) return;

                    for (int i = 0; i < nodeSize; i++)
                    {
                        deleteEdge(i, node);
                        deleteEdge(node, i);
                    }

                    nodeList[node] = false;
                    if (node == nodeSize - 1) nodeSize--;
                }


                bool CheckEdge(T from, T to)
                {
                    if (from < 0 || from >= maxSize || to < 0 || to >= maxSize)
                    {
                        cout << "Error: node no out of range.\n";
                        return false;
                    }
                    return true;
                }

                void insertEdge(T from, T to)
                {
                    if (!CheckEdge(from, to)) return;
                    adjMatrix[from][to] = true;
                    if (mode == GraphType::undirected) adjMatrix[to][from] = true; // 양방향 에지
                }

                void deleteEdge(T from, T to)
                {
                    if (!CheckEdge(from, to)) return;
                    adjMatrix[from][to] = false;
                    if (mode == GraphType::undirected) adjMatrix[to][from] = false; // 양방향 에지
                }

                T getNodeSize()
                {
                    int count = 0;
                    for (int n = 0; n < nodeSize; n++)
                    {
                        if (nodeList[n]) count++;
                    }
                    return count;
                }

                T getEdgeSize()
                {
                    int count = 0;
                    for (int r = 0; r < nodeSize; r++)
                    {
                        for (int c = 0; c < nodeSize; c++)
                        {
                            if (adjMatrix[r][c]) count++;
                        }
                    }
                    return count;
                }

                void print()
                {
                    cout << "Graph Print\n";
                    for (int r = 0; r < nodeSize; r++)
                    {
                        for (int c = 0; c < nodeSize; c++)
                        {
                            cout << adjMatrix[r][c] << ' ';
                        }
                        cout << '\n';
                    }
                }

                void graphvizPrint()
                {
                    string tempMode;
                    if (mode == GraphType::directed) tempMode = "->";
                    else tempMode = "--";

                    for (int r = 0; r < nodeSize; r++)
                    {
                        if (nodeList[r]) cout << "\t\"" << r << "\";\n";
                    }

                    for (int r = 0; r < maxSize; r++)
                    {
                        for (int c = 0; c < maxSize; c++)
                        {
                            if (adjMatrix[r][c]) cout << "\t\"" << r << "\" " << tempMode << " \"" << c << "\" \n";
                        }
                    }
                }

                void graphvizDriver()
                {
                    if (mode == GraphType::directed) cout << "digraph G {\n";
                    else cout << "graph G {\n";

                    graphvizPrint();
                    cout << "}\n";
                }
            };

            int main()
            {
                Graph<int> g(GraphType::directed);

                g.insertNode(0);
                g.insertNode(1);
                g.insertNode(2);
                g.insertNode(3);
                g.insertNode(4);
                g.insertNode(5);

                g.insertEdge(0, 1);
                g.insertEdge(0, 2);
                g.insertEdge(0, 3);
                g.insertEdge(0, 4);
                g.insertEdge(1, 3);
                g.insertEdge(2, 3);
                g.insertEdge(2, 4);
                g.insertEdge(3, 4);

                g.print();
                g.graphvizDriver();

                g.deleteEdge(1, 3);
                g.deleteNode(2);

                g.print();
                g.graphvizDriver();


                Graph<int> g2(GraphType::undirected);

                g2.insertNode(0);
                g2.insertNode(1);
                g2.insertNode(2);
                g2.insertNode(3);
                g2.insertNode(4);
                g2.insertNode(5);

                g2.insertEdge(0, 1);
                g2.insertEdge(0, 4);
                g2.insertEdge(1, 3);
                g2.insertEdge(2, 3);
                g2.insertEdge(2, 4);
                g2.insertEdge(3, 4);

                g2.print();
                g2.graphvizDriver();

                cout << "Node Size : " << g2.getNodeSize() << '\n';
                cout << "Edge Size : " << g2.getNodeSize() << '\n';
                cout << '\n';

                g2.deleteEdge(1, 3);
                g2.deleteNode(2);

                g2.print();
                g2.graphvizDriver();

                cout << "Node Size : " << g2.getNodeSize() << '\n';
                cout << "Edge Size : " << g2.getNodeSize() << '\n';
            }
        ```

    2. 인접 리스트를 이용한 구현

        [페이지 또 짤렸음 ㅡㅡ]


3. [응용] 지하철 노선 데이터

    실패


4. 그래프 탐색

    dfs bfs
        dfs 스택을 위한 저장 공간의 수요가 비교적 작다.
            스택은 트리의 깊이에 비례하는 용량이 필요하기 때문이다.
        bfs 큐를 위한 많은 기억 공간이 필요하다.
            탐색 과정 중에 발견하는 노드들을 모두 큐에 저장해두어야 하기 때문이다.
        
    [코드 생략]


5. 연결 성분 (connected component)

    [코드 생략]


6. 신장 트리 (spanning trees)

    그래프 내의 모든 노드를 포함하는 트리
    노드 n개, 에지 n-1개
    깊이 우선 신장 트리, 너비 우선 신장 트리

    [코드 생략]


7. 최소 신장 트리 (minimum spanning trees: MST)

    크루스칼 알고리즘
        그리디 알고리즘
        1. 에지들을 가중치의 오름 차순으로 정렬
        2. 모든 노드를 방문할 때까지, 선택되지 않은 에지 중에서 사이클을 이루지 않는
            최소 비용 에지를 선택하는 과정을 반복
    
        1. union-find 알고리즘
            union(x, y) 원소 x, y가 속해있는 두 집합의 합집합을 반환
        
            ```
                int setFind(int parent[], int i)
                {
                    if ROOT(i))
                        return i;
                    else
                        return setFind(parent, parent[i]);
                }

                void setUnion(int parent[], int x, int y)
                {
                    int xParent = setFind(parent, x);
                    int yParent = setFind(parent, y);

                    parent[xParent] = yParent;
                }

                void setPrint(int parent[])
                {
                    cout << "Parent array: ";
                    for (int i=0; i<MAX; i++) cout << parent[i] << ' ';
                    cout << '\n';

                    for (int i=0; i<MAX; i++)
                    {
                        cout << "Set " << i << ": ";
                        for (int j=0; j<MAX; j++)
                        {
                            if (setFind(parent, j) == i) cout << j << ' ';
                        }
                        cout << '\n';
                    }
                }

                int main()
                {
                    int set[MAX];

                    for (int i=0; i<MAX; i++) set[i] = -1;
                    setPrint(set);

                    setUnion(set, 1, 3);
                    setUnion(set, 2, 4);
                    setPrint(set);

                    setUnion(set, 1, 2);
                    setPrint(set);
                }
            ```

        2. Kruskal의 MST 알고리즘 구현

            ```
                class Edge
                {
                    int src, dest, weight;
                };

                class EdgeList
                {
                    Edge data[MAX_EDGE];
                    int size;
                }

                #define ROOT(x) (parent[x] == -1)
                
                Graph* kruskalMST()
                {
                    Graph* mst = new Graph(mode);
                    for (int node=0; node<nodeSize; node++)
                    {
                        mst.insertNode(node);
                    }

                    int set[MAX_EDGE];
                    set.setInit();

                    EdgeList elist;
                    sortEdgeList(&elist);

                    for (int e=0; e<elist.size; e++)
                    {
                        Edge next_edge = elist.data[e];
                        int x = set.setFind(elist.data[e].src);
                        int y = set.setFind(elist.data[e].dest);

                        if (x != y)
                        {
                            mst.insertEdge(elist.data[e].src, elist.data[e].dest, elist.data[e].weight);
                            set.setUnion(x, y);
                        }
                    }

                    return mst;
                }

                int cmpfunc(const void* a, const void* b)
                {
                    return (((Edge*)a)->weight > ((Edge*)b)->weight);
                }

                void sortEdgeList(EdgeList* elist)
                {
                    elist->size = 0;
                    if (mode == undirected)
                    {
                        for (int i=0; i<nodeSize; i++)
                        {
                            for (int j=0; j<i; j++)
                            {
                                if (adjMatrix[i][j])
                                {
                                    elist->data[elist->size].src = i;
                                    elist->data[elist->size].dest = j;
                                    elist->data[elist->size].weight = adjMatrix[i][j];
                                    elist->size++;
                                }
                            }
                        }
                    }
                    else if (mode == directed)
                    {
                        for (int i=0; i<nodeSize; i++)
                        {
                            for (int j=0; j<nodeSize; j++)
                            {
                                if (adjMatrix[i][j])
                                {
                                    elist->data[elist->size].src = i;
                                    elist->data[elist->size].dest = j;
                                    elist->data[elist->size].weight = adjMatrix[i][j];
                                    elist->size++;
                                }
                            }
                        }
                    }

                    for (int i=0; i<elist->size; i++)
                    {
                        cout << elist->data[i].weight;
                    }
                    cout << '\n';

                    qsort(elist->data, elist->size, sizeof(Edge), cmpfunc);

                    for (int i=0; i<elist->size; i++)
                    {
                        cout << elist->data[i].weight;
                    }
                    cout << '\n';
                }

                void setInit(int parent[])
                {
                    for (int i=0; i<MAX_NODE; i++)
                    {
                        parent[i] = -1;
                    }
                }

                int setFind(int parent[], int i)
                {
                    if (ROOT(i))
                        return i;
                    else
                        return setFind(parent, parent[i]);
                }

                void setUnion(int parent[], int x, int y)
                {
                    int xParent = setFind(parent, x);
                    int yParent = setFind(parent, y);

                    parent[xParent] = yParent;
                }
            ```

        3. Prim
            
            크루스칼
                O(e log2 e)
            프림
                O(n^2)
                <- minHeap을 사용하지 않은 것으로 보임

        
8. 최단 경로

    0. 개요
        단일 출발(single-source) 최단 경로
            단일 노드 v에서 출발하여 그래프 내의 모든 다른 노드에 도착하는 가장 짧은 경로를 찾는 문제

        단일 쌍(single-pair) 최단 경로)
            주어진 노드 u와 v사이의 최단 경로를 찾는 문제
        
        전체 쌍(all-pair) 최단 경로
            그래프 내 모든 노드 쌍들 사이의 최단 경로를 찾는 문제
    
    1. 데익스트라(Dijkstra)

        현재까지 알려진 s에서 v까지의 최단 경로에 weight(v, e)를 더하는 과정에서 더 작은 경로 값이 나오면 최단 경로를 업데이트
            알고리즘의 이런 특성을 '최적 구조(optimal sub-structure) 라고 한다.
            어떤 문제의 최적해가 그 부분 문제들의 최적해들로 구성된다.
            dp나 그리디 이용하면 효율적으로 해결할 수 있다.
    
        1. 시작 노드를 0으로, 다른 모든 노드를 무한대로 최단 거리값을 초기화하고,
            방문 완료 노드를 공집합으로 초기화

        2. 방문 완료되지 않은 노드가 있다면 다음 반복
            1. 방문 완료 되지 않은 노드들 중에서 가장 작은 최단 거리값을 가진 노드를 현재 노드 c로 선택
            2. 현재 노드 c의 이웃 노드 v에 대하여
                노드 c까지의 최단 거리값 + wight(c, v) 값이 현재의 노드 v의 최단 거리값보다 작으면, 
                이 값을 새로운 최단 거리값으로 수정
            3. 현재 노드 c를 방문 완료 노드로 체크
        
        벨만 포드는 음수 웨이트가 있는 그래프에서도 정확하게 동작 (음수 값을 가지는 사이클은 없어야 함)

    2. 데익스트라 알고리즘 구현
        ```
            void minDistance(int dist[], bool visited[], int nodeSize)
            {
                int min = INT_MAX, min_index;

                for (int v=0; v<nodeSize; v++)
                {
                    if (visited[v] == false && dist[v] <= min)
                    {
                        min = dist[v];
                        min_index = v;
                    }
                }
                return min_index;
            }

            void dijkstra(int src, int dist[], int previous[])
            {
                bool visited[MAX_NODE];
                int nodeSize = this->nodeSize;

                for (int i=0; i<nodeSize; i++)
                {
                    dist[i] = INT_MAX;
                    visited[i] = false;
                    previous[i] = -1;
                }

                dist[src] = 0;

                for (int count = 0; cout < nodeSize - 1; count++)
                {
                    int u = minDistance(dist, visited, nodeSize);
                    if (u == INT_MAX) return;

                    visited[u] = true;

                    for (int v=0; v<nodeSize; v++)
                    {
                        if (!visited[v] &&
                            adjMatrix[u][v] &&
                            dist[u] + adjMatrix[u][v] < dist[v])
                        {
                            dist[v] = dist[u] + adjMatrix[u][v];
                            previous[v] = u;
                        }
                    }
                }
            }
        ```

    3. A* 알고리즘

        휴리스틱
            휴리스틱 h(n)이 실제 거리를 과-추측하지 않는다면
            동일한 휴리스틱을 사용하는 경우에는 최적 알고리즘
            (언제나 최적의 해를 구한다는 말이 아님)


    4. Floyd 알고리즘

        O(n^3)
        다익스트라 알고리즘을 모든 노드에서 시작하는 것과 같지만, 더 간단


연습 문제
    
    1. A, B, D, E
        트리는 사이클이 존재하지 않는 단방향 그래프

    2. [생략]

    3. O(N * E)

    4. n

    5. n!

    6. E