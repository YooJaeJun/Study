
1. 정렬 알고리즘

    1. 선택 정렬 (selection sorting)

        가장 작은 데이터를 선택해 가장 앞의 데이터와 위치를 바꾸는 것

        ```
            void printArray(int a[], int size)
            {
                for (int i=0; i<size; i++)
                {
                    cout << a[i] << ' ';
                }
                cout << '\n';
            }

            void selectionSort(int a[], int size)
            {
                for (int i=0; i<size-1; i++)
                {
                    int smallest = i;
                    for (int j=i+1; j<size; j++)
                    {
                        if (a[j] < a[smallest]) smallest = j;
                    }

                    int temp = a[i];
                    a[i] = a[smallest];
                    a[smallest] = temp;
                }
            }
        ```

        O(n^2)

    2. 병합 정렬 (merge sorting)

        2개의 정렬된 서브 리스트를 병합하면서 정렬된 큰 리스트를 만들어가는 방식

        ```
            void merge(int a[], int first, int mid, int last)
            {
                int n1 = mid - first + 1;
                int n2 = last - mid;
                int a1[n1 + 1], a2[n2 + 1];
                
                int i, j, k;

                for (i=0; i<n1; i++)
                    a1[i] = a[first + i];
                
                for(j=0; j<n2; j++)
                    a2[j] = a[mid + j + 1];

                a1[i] = MAX_VALUE;
                a2[j] = MAX_VALUE;

                for (i = j = 0, k = first; k <= last; k++)
                {
                    if (a1[i] <= a2[i])
                        a[k] = a1[i++];
                    else
                        a[k] = a2[j++];
                }
            }

            void mergeSort(int a[], int first, int last)
            {
                if (first < last)
                {
                    int mid = (first + last) / 2;
                    mergeSort(a, first, mid);
                    mergeSort(a, mid + 1, last);
                    merge(a, first, mid, last);
                }
            }
        ```


2. 우선 순위 큐

    1. 배열 이용
    2. 연결리스트 이용
    
    3. 힙(heap)

        큐 - FIFO(First In First Out)
        우선 순위 큐 - 우선 순위
        
        힙 - 느슨한 정렬 상태를 유지하는 완전 이진 트리
            최대힙, 최소힙
            중복된 자료 허용

        1. 연산
            삽입
            1. 새로운 데이터는 우선순위가 가장 낮다는 가정 하에 마지막 위치에 저장
                이때 완전 이진 트리의 형태를 유지해야 한다.
            
            2. 삽입된 노드를 부모 노드와 값을 비교하면서 부모 노드가 자식 노드보다
                크거나 같을 때까지 루트 노드를 향해서 계속 비교/교환한다.

            삭제
            1. 마지막 노드를 루트 노드의 자리로 옮긴다.
                즉, 우선 순위가 가장 높은 루트 노드를 삭제하고, 마지막 노드를 루트 자리로 옮기는 것
            
            2. 루트 노드를 자식 노드와의 비교를 통해 제자리를 찾아간다.
                자식 노드 2개가 모두 자신보다 크면 그중에서 큰 값과 위치 교환
        
        2. 구현

            인덱스
            left child = parent * 2
            right child = parent * 2 + 1
            parent = child / 2

            ```
            #define MAX_NODE(100)
            #define LEFT_CHILD(i)   (i*2)
            #define RIGHT_CHILD(i)  ((i*2)+1)
            #define PARENT(i)       (i/2)

                class Heap
                {
                private:
                    int heap[MAX_NODE];
                    int size;

                public:
                    void init()
                    {
                        size = 0;
                    }

                    bool isEmpty()
                    {
                        return size == 0;
                    }

                    bool isFull()
                    {
                        return size == MAX_NODE - 1;
                    }

                    void add(int e)
                    {
                        if (isFull()) return;
                        else
                        {
                            size++;
                            int i;
                            for (i=size; i>1 && e > heap[PARENT(i)]; i/=2)
                            {
                                heap[i] = heap[PARENT(i)];
                            }
                            heap[i] = e;
                        }
                    }

                    int remove()
                    {
                        int root, temp;
                        int current, left, right, greatest;

                        root = heap[1];
                        heap[1] = heap[size];   // 마지막 항목을 root로 이동
                        size--;

                        for (current=1; current<size; )
                        {
                            left = LEFT_CHILD(current);
                            right = RIGHT_CHILD(current);
                            greatest = current;

                            if (left<=size && heap[left] > heap[current])
                            {
                                greatest = left;
                            }

                            if (right<=size && heap[right] > heap[greatest])
                            {
                                greatest = right;
                            }

                            if (greatest == current)
                                break;
                            else
                            {
                                swap(heap[gretest], heap[current]);
                                current = greatest;
                            }
                        }
                        return root;
                    }

                    void print()
                    {
                        for (int i=1; i<=size; i++)
                        {
                            cout << heap[i];
                        }
                        cout << '\n';
                    }

                    void graphvizPrint(int node)
                    {
                        if (node > size) return;
                        if (node != 1) cout << heap[node/2] << " -> " << heap[node] << '\n';

                        graphvizPrint(2 * node);
                        graphvizPrint(2 * node + 1);
                    }

                    void graphvizDriver()
                    {
                        cout << "digraph G {\n";
                        graphvizPrint(1);
                        cout << "}\n";
                    }
                };
            ```


연습 문제

    1. [생략]

    2. 리프 노드

    3. 완전 이진 트리 유지 위함

    4. 원하는 인덱스의 노드에 상수 시간만에 접근 가능

    5. 트리의 레벨(높이)

    6. 
                      24
                15          22
            14      12  17      20
        10      11

    7. 10, 11 삭제했으면 20이 마지막