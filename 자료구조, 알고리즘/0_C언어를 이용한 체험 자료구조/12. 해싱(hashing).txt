
1. 해싱의 기본

    키 값을 위치 값으로 변환하는 함수를 해시 함수라고 한다.
    접근 O(1)


2. 해시 함수와 해시 테이블

    충돌이 적어야 한다.

    1. 간단한 해시 함수: 자리 수 선택

    2. 간단한 해시 함수 구현

        C 컴파일러는 컴파일 과정 중에 심볼 테이블을 만들어 변수들을 관리

        ```
        const int bucketSize = 10;
            const string smaples[] = {
                "i", "j", "k", "test", "test1", "sample", "min"
            };

            int hashCode(const string str)
            {
                int hash = 0;
                for (int i=0; i<str.size(); i++)
                {
                    hash = (hash * 10) + (int)(str[i] - '0');
                }
                return hash % bucketSize;
            }

            int main()
            {
                int hashTable[bucketSize];

                for (int i=0; i<bucketSize; i++)
                    hashTable[i] = 0;
                
                for (int i=0; i<samples.size(); i++)
                {
                    const string source = samples[i];
                    int hashAddress = hashCode(cource);
                    hashTable[hashAddress]++;
                    cout << source << " --> " << hashAddress << '\n';
                }
            }
        ```

        -> 해시 주소 충돌함

    3. 충돌 해결책

        1. 오픈 어드레싱 (open addressing)

            하나의 버킷에 슬롯이 하나만 있는 경우
            새로운 항목이 추가될 때 해시 어드레스에서 시작해서, 특정한 순서로 비어있는 버킷을 찾아서 추가하는 방법
            특정한 순서?
                선형 탐색 (linear probing)
                    정해진 거리를 두고 조사하는 방법 (보통 1로 정해서 순차적 탐색)
                이차 탐색 (quadratic probing)
                    2차 다항식의 값을 더해서 조사하는 방법
            
            해시 값의 버킷 번호 조사
                비어 있지 않으면 다음 버킷 조사
                최초로 빈 버킷에 값 넣음
        
        2. 체이닝 (chaining)

            각 버킷에 연결 리스트를 이용해서 슬롯들을 구성하는 방법

        3. 체이닝을 이용한 해싱 구현

        ```
            class Element
            {
                string key;
                int value;
                Element* next;

                ~Element()
                {
                    delete next;
                    next = nullptr;
                }
            };

            class HashTable
            {
                int size;
                Element** bucket;

                HashTable(int bucketSize)
                    : size(bucketSize)
                {
                    bucket = new Element[size];

                    for (int i=0; i<bucketSize; i++)
                    {
                        bucket[i] = nullptr;
                    }
                }

                ~HashTable()
                {
                    for (int i=0; i<size; i++)
                    {
                        Elemnt* node = bucket[i];
                        while(node)
                        {
                            Element* temp = node;
                            node = node->next;
                            delete[] temp;
                        }
                    }

                    delete(bucket);
                }

                bool insert(string key, int value)
                {
                    Element* node, *prev;

                    int hashAddress = hashCode(key, size);
                    node = bucket[hashAddress];

                    // 처음
                    if (!node)
                    {
                        Element* e = new Element;
                        if (!e) return false;

                        e->key = key;
                        e->value = value;
                        e->next = nullptr;
                        bucket[hashAddress] = e;

                        return true;
                    }

                    // 이미 있으면
                    prev = node;
                    while(node)
                    {
                        if (node->key == key)
                        {
                            node->value = value;
                            return true;
                        }
                        else
                        {
                            prev = node;
                            node = node->next;
                        }
                    }

                    // 마지막에 노드 추가
                    node = new Element;
                    if (!node) return false;

                    node->key = key;
                    node->value = value;
                    node->next = nullptr;

                    prev->next = node;

                    return true;
                }

                Element* search(string key)
                {
                    int hashValue;
                    Element* node;

                    hashValue = hashCode(key, size);
                    node = bucket[hashValue];

                    while(node)
                    {
                        if (node->key == key) return node;
                        else node = node->next;
                    }

                    return nullptr;
                }

                int hashCode(string key, int bucketSize)
                {
                    int hash = 0;
                    for (int i=0; i<key.size(); i++)
                    {
                        hash = (hash * 10) + (int)(key[i] - '0');
                    }
                    return hash % bucketSize;
                }

                void print()
                {
                    Element* node;

                    if (ht == nullptr) return;

                    for (int idx=0; idx<size; idx++)
                    {
                        node = bucket[idx];
                        cout << "[" << index << "]: ";
                        while(node)
                        {
                            cout << "(" << node->key << " : " << node->value << ") -> ";
                            node = node->next;
                        }
                        cout << '\n';
                    }
                }
            };


            // main
            const string samples[] = {"i","j","test"};
            const int sampleValues[] = {0,1,2,10,20};

            int main()
            {
                HashTable* ht(10);

                for (int i=0; i<samples.size(); i++)
                {
                    ht.insert(samples[i], sampleValues[i]);
                }
                ht.print();

                ht.insert("i", 111);
                ht.insert("test", 222);
                ht.print();

                for (int i=0; i<samples.size(); i++)
                {
                    Element* node = ht.search(samples[i]);
                    if (node)
                    {
                        cout << "(" << node->key << " : " << node->value << ") -> ";
                    }
                }
                hy.destroy();
                ht = nullptr;

                return 0;
            }
        ```


연습문제

    1. A, C

    2. 해싱

    3. [생략], 키값 충돌

    4. [생략]