
1. 소프트웨어 공학

    폰 노이만

    소프트웨어 점점 대형화하면서 체계적인 소프트웨어 개발 방법론이 필요했음
    소프트웨어가 점차 복잡해지는 반면, 개발 및 관리 기술이 뒤따르지 못해 '소프트웨어의 위기'라는 말이 생김
    구조적 프로그래밍(structured programming) 같은 공학적 접근 방법이 도입됨
    '소프트웨어 공학'이라는 분야가 생김


2. 소프트웨어 개발 주기

    1 요구 분석
        자원, 예산
    2 시스템 명세
        입력, 처리 내용, 결과를 정의
    3 설계
        시스템 구조 설계, 사용자 인터페이스 설계
    4 구현
        프로그래밍 언어 선정, 기법 및 순서
    5 테스트
    6 유지보수
        비용 50% 비중 차지!

    소프트웨어 생명 주기


3. 문제 해결을 위한 프로그래밍의 절차
    
    프로그램의 규모가 커질수록 체계적인 프로그래밍 기법 필요
        자료 구조, 알고리즘이 필수적인 역할
    
    자료 구조
        데이터를 체계적으로 관리하는 방법
    알고리즘
        문제 해결의 순서를 효율적으로 기술하는 방법
    
    알고리즘 일반적 정의
        적합한 순서대로 수행되면 제한된 시간 내에 주어진 문제를 해결할 수 있는 명령어들의 집합
    
    프로그램
        컴퓨터에서 실제 수행될 수 있도록 구현된 알고리즘
    

4. 일반적인 코딩 팁

    전역 변수 사용 가급적 자제, 지역변수 사용
    변수의 이름을 가능하면 상세하게 작성
    모든 변수들을 초기화
    프로그램 시작 부분에 코드의 자세한 설명, 코드 속에도 주석


5. 이 책에서 사용하는 코딩 규칙

    변수나 함수 이름 등을 식별자(identifier)라고 한다.

    본 교재 Camelback notation (낙타 등 표기법)
        int findEnemy;
        struct Point {};


6. 디버깅하는 방법
    
    논리(semantic) 에러 (알고리즘 설계 과정에서 발생)
        i += 1; 을 i -= 1;
        무한루프

    컴파일 에러
        소스 프로그램 컴파일 중 발생하는 문법적인 에러(syntactic error)

    링크 에러
        큰 프로그램을 작성하기 위해 여러 개의 소스 파일로 나누어서 컴파일한 오브젝트 파일들을
            결합(linking) 과정에서 나타나는 에러
    
    런타임(run-time) 에러
        프로그램 실행 중에 발생하는 에러로써, 프로그램 실행 시에 허가되지 않은 메모리를 사용한다든지,
        0으로 나누려고 하는 등
