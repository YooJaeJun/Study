
1. 자료 구조란?

    그룹
    기본 자료형
    
    선형 구조
        배열(1차원, 2차원 등), 배열 리스트, 연결 리스트, 스택, 큐 등
    
    트리 구조
        선형으로 저장되지 않는 자료 구조로써 부모-자식 관계로 표현된다.
        트리, 이진 트리 등
    
    그래프 구조
        방향성 그래프, 비 방향성 그래프 등
    
    힙
        최대값 or 최소값을 빠르게 찾기 위해 고안된 
            완전 이진 트리(complete binary tree)를 기본으로 하는 자료 구조
    
    해싱
        빠른 데이터 사용을 위해 주소를 통해 항목에 접근하는 자료 구조


2. 일상 생활에서 사용하는 자료 구조들의 예

    배열
    배열 리스트, 연결 리스트
    스택
        LIFO Last In First Out      // 오타 있다
    큐
        FIFO First In First Out
    트리와 그래프
        사이틀이 있으면 그래프
        트리는 그래프의 부분 집합이다.
    힙
        운영 체제에서 CPU 스케쥴링 분야에서 사용되는 우선 순위 큐
    해싱


3. 알고리즘이란?
    자연어
    순서도
    의사 코드(pseudo-code)

    1 알고리즘 효율성 분석 #1

        크기 100 1차원 배열, 모든 배열 원소 값 0~99 사이 랜덤 정수
        ```
        #include <stdio.h>
        #include <stdlib.h>

        int main()
        {
            int samples[100];
            int graph[10];

            for (int i = 0; i < 10; i++) graph[i] = 0;
            for (int i = 0; i < 100; i++) samples[i] = (int)rand() % 100;
            for (int i = 0; i < 100; i++)
            {
                graph[samples[i] / 10]++;
            }
            for (int i = 0; i < 10; i++) printf("%d ", graph[i]);
            return 0;
        }
        ```

    2 알고리즘 효율성 분석 #2

        기준
            정확성, 수행 시간, 사용하는 메모리, 이해성(readability)
        
        효율성 분석 아이디어
            1 소스 코드의 줄 수
            2 알고리즘을 구현한 프로그램의 실제 실행 속도

            시간 측정
            ```
            #include <stdio.h>
            #include <time.h>

            int main()
            {
                float elapsedTime;
                clock_t startTime = 0, endTime = 0;

                startTime = clock();
                for (int i = 0; i < 100'000'000; i++) {}

                endTime = clock();
                elapsedTime = (float)(endTime - startTime) / (CLOCKS_PER_SEC);

                printf("elapsed time is : %f seconds. \n", elapsedTime);
                return 0;
            }
            ```

            3 조금 더 실제적이고 효과적인 방법

            시간 복잡도 (time complexity)
                '입력 데이터의 개수'에 따른 '단위 연산의 수행 횟수'를 측정

            공간 복잡도 (space complexity)
                고정 공간, 가변 공간
                고정 공간: '입력 데이터의 개수'에 따른 '기본 메모리 양'을 측정
            
    3. BIG-O 표기법
        
        가장 큰 항(term)

        O(1)
            배열 특정 위치 직접 접근
        O(log(n))
            배열 이진 탐색, 트리 포화 이진 트리에의 탐색
        O(n)
            연결 리스트 특정 위치 접근
            배열 모든 값 출력
        O(nxlog(n))
            퀵 정렬, 머지 정렬 등
        O(n^2)
            선택 정렬, 버블 정렬
        
    
4. 추상 데이터 타입(Abstract Data Type: ADT)

    클래스 사용

    Abstract Data Structure
    Functions / Operations      : interface

    인터페이스라는 이름으로 사용법만을 공개


5. 기본 자료형



연습문제
    1. [생략]
    2. 
        배열 - 연속적인 데이터 집합이 필요할 때
        리스트 - 중간중간 삽입, 삭제가 잦은 데이터 집합이 필요할 때
        스택 - 가장 나중에 넣은 데이터를 바로 빼낼 때
        큐 - 먼저 들어간 데이터를 쉽게 빼내고 싶을 때
        트리 - 정렬이 필요한 데이터들, key-value
        그래프 - 길 탐색 등
    3. 
        배열 - 몬스터들
        리스트 - 스네이크 게임 머리, 꼬리
        스택 - 
        큐 - 스네이크 게임 머리, 꼬리
        트리 - map으로 아이템 타입 등
        그래프 - 길 탐색
    4. 9n^2
    5. 
    6. 1, log n, n, n log n, n^2, n!, 2^n
    7. O(n^2)
    8. O(n^2)
    9. O(n log(n))
    10. 1, 3번
    11. 구현부와 인터페이스 분리. 사용자는 구현 부분을 알 필요 없이 사용할 부분만 알면 된다.
    12. 
