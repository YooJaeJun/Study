
0. 개요

    스택 구조
        LIFO (Last In First Out)
            가장 최근에 push된 데이터가 가장 먼저 나온다.

    함수 호출과 시스템 스택
        운영 체제가 함수 호출하며 프로그램 실행
        프로세스
            컴퓨터 상에 실행 중인 프로그램
            운영 체제에 의해 운영되는 시스템 작업의 기본 단위
        프로세스 구조
            CODE
                함수, 제어문, 상수
                프로그램의 인스트럭션(명령어)들이 위치
                컴파일 시 크기 결정
            DATA
                초기화된 전역변수
                전역 변수와 정적 변수들이 위치
                컴파일 시 크기 결정
            BSS(Blocked Stated Symbol)
                초기화 안된 전역변수
                컴파일 시 크기가 결정
            HEAP
                동적할당
                실행 중 메모리 할당
            STACK
                지역변수
                지역 변수와 매개변수들이 위치
                실행 중 메모리 할당
        스택 프레임
            함수 호출 시 복귀 주소와 인자의 전달을 위해
            매번 함수가 호출될 때마다 스택 프레임이 구성되도록 함


1. 1차원 배열을 이용한 스택 구현

    template으로 직접 만들어보기

    ```
        #include <iostream>
        using namespace std;

        template<typename T>
        class Stack
        {
        public:
            T* arr;
            int size;

        private:
            int capacity;

        public:
            Stack()
            {
                arr = new T[2];
                size = 0;
                capacity = 2;
            }
            ~Stack()
            {
                if (arr) delete[] arr;
            }

        public:
            void push(T num)
            {
                if (isFull())
                {
                    capacity *= 2;
                    T* temp = new T[capacity];
                    for (int i = 0; i < size; i++)
                    {
                        temp[i] = arr[i];
                    }
                    delete[] arr;
                    arr = new T[capacity];
                    copy(temp, temp + size, arr);
                }
                
                arr[size++] = num;
            }

            void pop()
            {
                if (isEmpty())
                {
                    cout << "비어있어서 pop 불가\n";
                    return;
                }
                arr[size - 1] = -1;
                size--;
            }

            bool isEmpty()
            {
                return size == 0;
            }

            T top()
            {
                return arr[size - 1];
            }

            void print()
            {
                for (int i = size - 1; i >= 0; i--)
                {
                    cout << arr[i] << ' ';
                }
            }

        private:
            bool isFull()
            {
                return size >= capacity;
            }
        };

        int main()
        {
            Stack<char> st;
            st.push('a');
            st.push('b');
            st.push('c');
            st.push('d');
            st.print();
        }
    ```


2. 괄호 매칭 검사
    [너무 쉬워 생략]


3. 후위 표기식(postfix) 계산

    계산 방법
        문자열 처음부터 피연산자는 스택에 push.
        연산자를 만나면 스택 top에 2개의 피연산자를 연산한 결과를 push.

        스택 top의 연산자의 우선순위가 새로 추가되는 연산자의 우선순위보다 높거나 같다면 pop해서 출력, 현재 연산자를 push.
        '('는 무조건 push.
        ')'는 '(' 위의 모든 연산자를 출력, '('는 없앤다.

    1. 중위 표기범위 후위 표기법 변경 코드
        한꺼번에
    2. 후위 표기법 계산 코드

    ```
        #include <iostream>
        using namespace std;

        template<typename T>
        class Stack
        {
        public:
            T* arr;
            int size;

        private:
            int capacity;

        public:
            Stack()
            {
                arr = new T[2];
                size = 0;
                capacity = 2;
            }
            ~Stack()
            {
                if (arr) delete[] arr;
            }

        public:
            void push(T num)
            {
                if (isFull())
                {
                    capacity *= 2;
                    T* temp = new T[capacity];
                    for (int i = 0; i < size; i++)
                    {
                        temp[i] = arr[i];
                    }
                    delete[] arr;
                    arr = new T[capacity];
                    copy(temp, temp + size, arr);
                }

                arr[size++] = num;
            }

            T pop()
            {
                if (isEmpty())
                {
                    cout << "비어있어서 pop 불가\n";
                    exit(1);
                }
                T temp = arr[size - 1];
                arr[size - 1] = -1;
                size--;
                return temp;
            }

            bool isEmpty()
            {
                return size == 0;
            }

            T top()
            {
                return arr[size - 1];
            }

            void print()
            {
                for (int i = size - 1; i >= 0; i--)
                {
                    cout << arr[i] << ' ';
                }
            }

        private:
            bool isFull()
            {
                return size >= capacity;
            }
        };

        /*
        int main()
        {
            Stack<char> st;
            st.push('a');
            st.push('b');
            st.push('c');
            st.push('d');
            st.print();
        }
        */

        class Postfix
        {
        public:
            bool isOperand(char ch)
            {
                return ch >= '0' && ch <= '9';
            }

            bool isOperator(char ch)
            {
                string operators = "+-*/%";
                return strchr(operators.c_str(), ch);
            }

            int prec(char ch)
            {
                switch (ch)
                {
                case '+':
                case '-':
                    return 1;
                case '%':
                case '*':
                case '/':
                    return 2;
                }
                return -1;
            }

            bool infixToPostfix(string& exp)
            {
                Stack<char> st;
                int iPostfix = -1;

                for (size_t i = 0; i < exp.size(); i++)
                {
                    if (isOperand(exp[i]))
                    {
                        exp[++iPostfix] = exp[i];
                    }
                    else if (exp[i] == '(')
                    {
                        st.push(exp[i]);
                    }
                    else if (exp[i] == ')')
                    {
                        while (!st.isEmpty() && st.top() != '(')
                        {
                            exp[++iPostfix] = st.pop();
                        }
                        if (!st.isEmpty() && st.top() != '(')
                        {
                            return false;
                        }
                        else
                        {
                            st.pop();
                        }
                    }
                    else if (isOperator(exp[i]))
                    {
                        while (!st.isEmpty() && prec(exp[i]) <= prec(st.top()))
                        {
                            exp[++iPostfix] = st.pop();
                        }
                        st.push(exp[i]);
                    }
                }

                while (!st.isEmpty())
                {
                    exp[++iPostfix] = st.pop();
                }
                for (int i = iPostfix + 1; i < exp.size(); i++)
                {
                    exp[i] = '\0';
                }
                return true;
            }

            int evalPostfixExpression(string& exp)
            {
                Stack<int> st;
                char ch;
                int operand1, operand2;

                for (size_t i = 0; i < exp.size(); i++)
                {
                    ch = exp[i];

                    if (isOperand(ch))
                    {
                        st.push(ch - '0');
                    }
                    else if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '%')
                    {
                        operand2 = st.pop();
                        operand1 = st.pop();

                        switch (ch)
                        {
                        case '+': st.push(operand1 + operand2); break;
                        case '-': st.push(operand1 - operand2); break;
                        case '*': st.push(operand1 * operand2); break;
                        case '/': st.push(operand1 / operand2); break;
                        case '%': st.push(operand1 % operand2); break;
                        }
                    }
                }
                return st.pop();
            }
        };

        int main()
        {
            int result = 0;
            
            string exp[7] = { 
                "4*5+1",
                "3+4*(5+1)",
                "3+4-5",
                "(4+5)*6",
                "3 * 4 / 5 * 6",
                "4 + 4 / (8 - 2)",
                "5%2 + 3 % 6"
            };

            Postfix pf;

            for (auto& elem : exp)
            {
                cout << elem << " = ";
                pf.infixToPostfix(elem);
                cout << elem << " = ";
                result = pf.evalPostfixExpression(elem);
                cout << result << '\n';
            }
        }
    ```

    심화 1번만 했다.


4. [응용] 미로 탈출

    1. 스택을 이용한 구현

    2. 재귀함수(recursive function)
        
        문제 자체가 재귀적
            피보나치 수열
            등각 나선
            하노이 타워
            Quick 정렬
            Merge 정렬
            이진 검색
            게임 트리
    
    이하 오픈 프레임 웍스 생략


5. 재귀함수의 응용

    1. 프랙탈
    2. 몬드리안 그림


연습 문제

    1. O(1)

    2. LIFO (Last in First out)

    3. 4, 5

    4. 함수 호출 시 스택 프레임을 통해 함수의 복귀 주소를 쌓기 때문에.

    5.
        BC-D*EF*+
        943*1+-5*3*2+
        BA-CD+-
        AB+D*EFAD*+/+C+

    6. /
        1234*56-/++7-

    7. 13

    8. ?

    9. 1
        활성화 레코드 : 함수 호출에 사용되는 정보들을 저장하기 위해 생성되는 스택

    10. 10 9 ... 1
    
    11. 
    ```
        #include <iostream>
        using namespace std;

        float sum(float n)
        {
            if (n <= 1.0f) return 1.0f;
            return 1.0f / n + sum(n - 1.0f);
        }

        int main()
        {
            printf("%f", sum(3));
        }
    ```

    12. [생략]

    13. 어려워서 추후로

    14. 백준에서 해봤는데 골드 상위급임

    15. 
        코드를 작성하는 것과 컴파일이 쉽고 가상 머신이 빠르기 때문에 널리 사용 되고 있다. 
        대상 하드웨어(레지스터, CPU 기능 등)에 대해 직접적으로 다루지 않으므로 다양한 하드웨어에서 VM을 쉽게 구현할 수 있다.
        피연산자가 스택 포인터에 의해 암시적으로 처리된다.

    16. 내 것처럼 capacity 초과 시 임시 새 배열을 capacity 2배만큼 더 늘려줌. 
        멤버 배열을 삭제하고, 다시 생성. 
        임시 배열의 기존 요소들을 멤버에 대입