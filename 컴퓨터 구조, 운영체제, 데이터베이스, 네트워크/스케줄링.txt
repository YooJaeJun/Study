
CPU 스케줄링

비선점
	FCFS
	SJF
	우선순위
	HRN
	기한부
선점
	Round Robin
	SRT
	선점 우선순위
	다단계 큐
	다단계 피드백 큐

비선점

FCFS
	레디 큐에 도착한 순서대로 CPU를 할당하는 비선점형 방식
	콘보이 효과
		CPU 처리 시간이 길지만 덜 중요한 작업이,
		CPU 처리 시간이 짧고 더 중요한 작업을 기다리게 함
SJF
	처리 시간 짧은 순서대로
	기아 현상
		CPU 처리 시간이 긴 프로세스의 경우 
		처리 시간이 짧은 프로세스가 계속 들어오면 
		레디 큐에서 무한정 CPU를 기다려야 하는 상황
HRN
	SJF 발생 가능한 기아 상태를 해결 위해 고안
	우선순위 - 레디큐에 대기한 시간 고려
		== aging 기법
	HRN이 선점일 경우 우선순위 높은 프로세스들이 너무 자주 생기기 때문에
		Context Switching이 너무 자주 발생
		하여 비선점 방식으로 이루어짐
	-> SJF / HRN 사용 어려움 -> 프로세스마다 처리 시간 알기 어려움

우선순위
	대기 중 프로세스들에 우선순위 부여
	우선순위 같으면 FCFS 순서로 스케줄
	기아 현상 - 우선순위 낮은 프로세스는 무한정 기다림
	대기시간 늘어나면 프로세스들의 우선순위 증가
		aging 기법으로 기아 상태 방지

선점

SRT
	Shortest Remaining Time
	CPU 처리 시간이 짧은 프로세스 들어올 경우, 
		새 프로세스가 CPU 점유
	잦은 Context Switching
	기아 현상 더 심함
우선순위
	비선점 버전
라운드 로빈
	FCFS + 선점 + Time Quantum 개념 추가
	프로세스에게 각각 동일한 CPU 할당 시간(타임 슬라이스, quantum) 부여ㅑ
		그 동안만 CPU 이용하게 함
		지나면 레디 큐 가장 뒤로
	크면 FCFS의 콘보이 효과 발생
	작으면 Context Switching으로 인한 오버헤드
다단계 큐
	Multi-Level Queue
	Ready Queue를 여러 개로 나누어 사용
	큐들 사이를 이동할 수 없다.
	사용자와 직접 상호작용하는 프로세스가 모인 Foreground Queue에는
		라운드 로빈
	Background Queue에는 응답시간이 큰 의미 없기 때문에
		FCFS
	각 Queue마다 운영체제가 가장 적정하다고 판단하는 스케줄링 방식 사용
	고정 우선순위, 타임 슬라이스
다단계 피드백 큐
	다단계 큐 방식에 aging 기법 적용
	우선순위 변동
		너무 오래 기다린 프로세스의 우선순위 점점 올림
			-> 기아 현상 예방
		한 번 CPU 할당받은 프로세스는 우선순위가 조금 낮아짐

